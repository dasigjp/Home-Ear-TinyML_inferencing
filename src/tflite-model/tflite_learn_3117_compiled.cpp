/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.02.2025 13:12:50

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 16
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 32
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 10528;
#else
constexpr int kTensorArenaSize = 9504;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_PAD, OP_CONCATENATION, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 5;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 5;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant0_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const TfArray<2, int> tensor_dimension1 = { 2, { 1,3 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant1_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 49, 13, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension3 = { 4, { 1,49,13,1 } };
const TfArray<1, float> quant3_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant3_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 0, -34, 0, 0, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension7 = { 4, { 1,15,13,1 } };
const TfArray<1, float> quant7_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant7_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 42, -47, 84, 
  /* [0][1][][] */ 92, -127, 90, 
  /* [0][2][][] */ 90, -93, 55, 
  /* [1][0][][] */ -113, -8, -51, 
  /* [1][1][][] */ 127, -94, 20, 
  /* [1][2][][] */ -43, 120, 19, 
  /* [2][0][][] */ 6, 106, -101, 
  /* [2][1][][] */ -15, 103, -127, 
  /* [2][2][][] */ -46, 84, -106, 
  /* [3][0][][] */ -3, -46, 45, 
  /* [3][1][][] */ -99, -28, -80, 
  /* [3][2][][] */ 127, 54, 58, 
  /* [4][0][][] */ -33, -5, -65, 
  /* [4][1][][] */ 62, -96, 90, 
  /* [4][2][][] */ -32, 127, -47, 
  /* [5][0][][] */ -58, 116, -69, 
  /* [5][1][][] */ -72, 127, -78, 
  /* [5][2][][] */ -73, 118, -88, 
  /* [6][0][][] */ 69, 127, 38, 
  /* [6][1][][] */ 38, -84, 12, 
  /* [6][2][][] */ -104, -54, -61, 
  /* [7][0][][] */ 78, 127, 51, 
  /* [7][1][][] */ 59, 124, 69, 
  /* [7][2][][] */ 30, 100, 59, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.002450733445584774, 0.0030240761116147041, 0.0023215636610984802, 0.0036533609963953495, 0.0027091989759355783, 0.0016800557496026158, 0.0030741463415324688, 0.0020088255405426025, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[8] = { -2391, -1708, -3163, -1886, -1754, -2100, -1636, -2502, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 0.00010814959387062117, 0.00013345089973881841, 0.00010244939767289907, 0.00016122091619763523, 0.00011955553782172501, 7.4139985372312367e-05, 0.00013566047709900886, 8.8648426753934473e-05, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,15,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,8,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data13[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,7,7,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[16*3*3*8] = { 
  /* [0][0][][] */ 32,-11,91,8,-22,49,7,-12, 67,-2,3,-51,-46,-32,70,-66, -6,7,14,-7,-83,16,-41,-39, 
  /* [0][1][][] */ -26,40,127,27,42,-10,-58,-35, -54,66,-8,33,0,-10,-17,-24, -37,7,37,41,24,31,-43,-23, 
  /* [0][2][][] */ -8,39,-27,-14,26,95,75,-9, 71,18,-39,-12,-33,29,-33,-31, 8,2,22,-8,-12,20,70,50, 
  /* [1][0][][] */ 6,70,60,19,40,11,13,14, -10,-28,-38,20,17,53,29,51, 47,-23,12,-30,-54,-54,6,-30, 
  /* [1][1][][] */ 25,8,76,-2,-68,-21,28,-41, 49,26,25,-47,-23,28,25,-41, 49,-6,0,-12,-6,41,-3,-54, 
  /* [1][2][][] */ -7,-54,95,-59,65,127,2,-68, -85,-37,7,-24,33,53,-12,-20, -105,-13,66,38,22,-19,-85,-41, 
  /* [2][0][][] */ -2,43,7,54,33,-36,65,3, 27,46,4,80,33,-34,37,18, -45,15,1,-34,-36,-36,49,-2, 
  /* [2][1][][] */ 34,68,-3,54,-18,-26,127,-10, -20,76,-27,24,59,-12,-4,-45, -40,-63,31,22,5,-55,9,-28, 
  /* [2][2][][] */ 16,60,-9,62,-5,-7,-39,-35, -56,101,18,122,62,-8,58,-1, -1,-28,-21,20,-71,-75,-40,-23, 
  /* [3][0][][] */ 26,-68,70,-62,101,11,-107,11, 40,-92,-79,46,-52,-127,-55,-25, -80,-25,-52,-70,10,-68,-5,36, 
  /* [3][1][][] */ 43,-94,36,-12,-16,-75,-96,17, -39,-19,-113,-47,-98,-48,-60,52, -119,-10,64,32,-89,-45,17,45, 
  /* [3][2][][] */ 28,5,78,-75,78,61,-7,10, -115,-59,-60,-78,-72,-124,11,53, -71,-63,37,-124,0,-52,-6,32, 
  /* [4][0][][] */ -44,-56,-55,-56,-50,-80,1,63, -107,-24,-96,-74,-109,-39,-32,47, 10,-33,28,-48,-63,85,-59,68, 
  /* [4][1][][] */ -99,-6,-23,-11,36,26,36,34, -37,87,-64,76,-10,-21,-10,98, -11,-30,48,59,7,-12,-8,-1, 
  /* [4][2][][] */ -127,-32,-17,-46,-66,-35,1,-79, -58,8,-73,-18,-41,-70,-56,107, -33,11,25,-37,29,22,-103,82, 
  /* [5][0][][] */ -21,4,3,35,-26,-68,-24,-14, -59,45,-6,26,89,37,-84,-46, -27,45,-4,47,-7,-45,6,13, 
  /* [5][1][][] */ -18,31,24,11,25,-44,-20,-66, -18,24,1,101,48,47,127,3, 11,11,-1,92,-53,-22,61,-21, 
  /* [5][2][][] */ 26,17,-20,39,-57,-6,-22,-36, 11,81,-42,85,51,-38,23,-57, 7,38,-33,67,-41,-42,1,-75, 
  /* [6][0][][] */ 71,-72,23,-34,-75,-7,-33,-111, 87,-29,29,-30,-48,89,-32,18, -11,-55,-53,25,-18,-29,-52,-23, 
  /* [6][1][][] */ -22,-85,58,-89,-67,26,-46,-127, 84,-20,-18,-64,5,99,-20,7, 43,23,8,-77,-43,4,55,20, 
  /* [6][2][][] */ 33,-111,65,-65,-94,2,-84,-120, 101,-23,17,-35,39,64,-61,37, -6,1,-2,44,-38,-71,-46,-63, 
  /* [7][0][][] */ -17,65,23,-54,-39,91,37,-1, 104,94,42,37,71,103,-7,46, -58,-1,-98,-16,-32,-58,50,-25, 
  /* [7][1][][] */ -8,66,24,-45,77,31,45,102, 5,61,-26,75,7,122,86,46, -111,-41,-40,1,-56,-54,-17,32, 
  /* [7][2][][] */ -94,-65,20,-17,-30,-47,12,28, -52,-21,-54,30,86,17,-87,-52, -88,-18,-2,-63,-127,6,43,-46, 
  /* [8][0][][] */ 127,-93,89,-22,-19,120,51,6, -22,-64,-63,-13,-14,8,-2,12, 11,-41,24,12,-18,49,-31,-28, 
  /* [8][1][][] */ 41,-76,115,-39,-18,-23,-5,-42, -7,4,-22,-20,-43,56,-30,8, -39,-64,-24,-51,-24,30,53,8, 
  /* [8][2][][] */ 80,-117,99,-96,-35,119,-21,-3, 112,-47,35,-52,-6,4,-55,27, 19,-19,-32,10,-27,-6,16,-74, 
  /* [9][0][][] */ 61,-77,-39,-51,-67,61,-19,33, 24,-78,10,-63,-19,102,-74,98, 30,-82,-64,-12,-89,35,-9,77, 
  /* [9][1][][] */ 1,-15,-95,-66,-74,119,-59,56, 26,-123,92,-91,-21,52,-82,31, 8,-50,12,-42,-46,47,-31,-17, 
  /* [9][2][][] */ -30,5,-62,-61,-34,28,-123,1, 76,-82,42,-65,-24,76,-91,127, 11,-43,-41,-20,1,69,-52,15, 
  /* [10][0][][] */ 17,21,24,92,45,-73,122,23, -66,6,-8,7,-10,-36,1,-31, -63,10,-58,-11,-23,-17,-60,47, 
  /* [10][1][][] */ 21,86,-2,127,13,-9,124,37, -13,13,38,6,-39,-74,76,24, -26,46,-83,-7,-18,-20,-26,34, 
  /* [10][2][][] */ 43,56,12,75,104,-76,120,-19, -98,69,14,-2,18,1,-12,-45, -81,4,-51,-35,-54,-67,-14,12, 
  /* [11][0][][] */ -8,72,16,92,77,-11,9,-45, -59,-9,8,9,63,-31,25,21, -50,-32,-14,-14,-63,-22,-53,15, 
  /* [11][1][][] */ 7,103,8,-33,6,-16,61,-71, -52,24,-33,-11,-22,-5,0,-25, -62,-41,20,-8,-75,3,-31,7, 
  /* [11][2][][] */ -4,38,2,127,73,16,63,-51, -1,50,-22,29,22,-20,-80,-25, -14,-56,13,4,-44,-14,53,21, 
  /* [12][0][][] */ -87,34,-45,19,-19,-42,65,-32, -54,-39,-66,-23,-57,-25,-5,61, 17,-18,50,-2,23,14,-40,16, 
  /* [12][1][][] */ -127,-18,-22,8,-6,0,-3,-13, -42,-13,-54,-24,-38,-40,-9,10, 9,-22,37,-27,-10,16,-25,31, 
  /* [12][2][][] */ -87,-23,-38,-53,1,-42,-58,-29, -61,-8,-30,70,-34,-53,21,-10, 14,-33,43,-24,4,24,6,1, 
  /* [13][0][][] */ -53,-7,-29,-53,-70,14,29,-67, -55,-25,-95,-37,-98,-36,-13,66, -37,-39,70,-15,34,-8,-54,76, 
  /* [13][1][][] */ -72,37,-9,-18,-14,-67,1,-37, -97,-26,-114,-85,-127,-1,-26,30, -62,-93,36,-60,21,26,-10,27, 
  /* [13][2][][] */ -60,70,-28,65,4,-19,-36,-29, -51,20,-56,14,-45,-28,14,26, -56,-25,24,-70,6,35,1,49, 
  /* [14][0][][] */ 91,-20,105,-28,24,104,11,-33, -18,32,26,2,8,26,40,-9, 34,-30,2,25,8,-25,23,-13, 
  /* [14][1][][] */ 127,-38,28,-40,-18,82,1,-61, 15,41,4,-13,13,-6,52,-10, -18,9,-11,-17,-14,-2,9,15, 
  /* [14][2][][] */ 84,20,71,-30,15,106,-30,-62, -31,4,-24,-11,50,-37,3,-18, 3,38,-8,-9,-12,6,1,26, 
  /* [15][0][][] */ 22,-6,-64,-74,-9,-64,-66,-3, -61,-61,88,-36,-12,-44,-73,56, -29,-87,11,-81,-123,-41,46,72, 
  /* [15][1][][] */ 65,-63,12,-86,-3,93,-55,68, 2,-86,105,-39,-83,123,14,107, 30,-65,-1,-38,-19,53,-48,-53, 
  /* [15][2][][] */ 1,-14,8,-82,-35,-49,-22,127, 55,-66,41,-18,-83,-41,-99,-38, 71,-2,21,-31,-80,-9,-54,64, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant16_scale = { 16, { 0.0024663691874593496, 0.0027973835822194815, 0.0028591172304004431, 0.0016884685028344393, 0.0029246148187667131, 0.0028524673543870449, 0.0030097372364252806, 0.0020142898429185152, 0.0027121126186102629, 0.0026058182120323181, 0.0023681262973695993, 0.0035899425856769085, 0.0047551468014717102, 0.0039182738400995731, 0.0036215886939316988, 0.0021083895117044449, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[16] = { -3045, -623, -2295, -1022, 2073, -3363, -1841, -3585, -2073, 1681, -2224, -624, 2062, 4265, -1212, -1877, };
const TfArray<1, int> tensor_dimension17 = { 1, { 16 } };
const TfArray<16, float> quant17_scale = { 16, { 5.1264978537801653e-05, 5.8145313232671469e-05, 5.9428482927614823e-05, 3.5095839848509058e-05, 6.0789890994783491e-05, 5.929026156081818e-05, 6.2559207435697317e-05, 4.1868235712172464e-05, 5.6372904509771615e-05, 5.4163509048521519e-05, 4.922293737763539e-05, 7.4619129009079188e-05, 9.8838609119411558e-05, 8.1443693488836288e-05, 7.5276911957189441e-05, 4.3824151362059638e-05, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension20 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension21 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension22 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[4] = { 0, 9, 0, 0, };
const TfArray<1, int> tensor_dimension24 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[4] = { 0, -22, 0, 0, };
const TfArray<1, int> tensor_dimension25 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension26 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,18,13,1 } };
const TfArray<1, float> quant27_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant27_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension28 = { 2, { 4,2 } };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,19,13,1 } };
const TfArray<1, float> quant29_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant29_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,19,13,8 } };
const TfArray<1, float> quant30_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data31[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension31 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension32 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data33[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension33 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant34_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant35_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<4, int> tensor_dimension36 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant36_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data37[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension37 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension38 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data39[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension39 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension40 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant40_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<4, int> tensor_dimension41 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant41_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant41_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension42 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data43[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension43 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data44[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension44 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data46[4] = { 0, 21, 0, 0, };
const TfArray<1, int> tensor_dimension46 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data47[4] = { 0, -10, 0, 0, };
const TfArray<1, int> tensor_dimension47 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data48[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension48 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,18,13,1 } };
const TfArray<1, float> quant49_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant49_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data50[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension50 = { 2, { 4,2 } };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,19,13,1 } };
const TfArray<1, float> quant51_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant51_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,19,13,8 } };
const TfArray<1, float> quant52_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data53[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension53 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data54[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension54 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data55[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension55 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant56_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant57_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data59[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension59 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data60[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension60 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data61[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension61 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant63_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data64[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension64 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data65[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension65 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data66[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension66 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant67_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data68[4] = { 0, 33, 0, 0, };
const TfArray<1, int> tensor_dimension68 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data69[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension69 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data70[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension70 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,16,13,1 } };
const TfArray<1, float> quant71_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant71_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data72[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension72 = { 2, { 4,2 } };
const TfArray<4, int> tensor_dimension73 = { 4, { 1,17,13,1 } };
const TfArray<1, float> quant73_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant73_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant74_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data75[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension75 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data76[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension76 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data77[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension77 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,15,13,8 } };
const TfArray<1, float> quant78_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,8,7,8 } };
const TfArray<1, float> quant79_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data80[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension80 = { 2, { 4,2 } };
const TfArray<4, int> tensor_dimension81 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant81_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant82_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data83[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension83 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data84[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension84 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data85[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension85 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant86_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant87_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant88_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data89[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension89 = { 1, { 2 } };
const TfArray<2, int> tensor_dimension90 = { 2, { 1,832 } };
const TfArray<1, float> quant90_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data91[3*832] = { 
  26, 19, 53, -17, 0, 28, 4, 11, -8, -29, 20, 49, -6, -13, 26, 0, 8, -9, -4, 18, 14, -18, 8, 2, -18, 16, 36, 6, 17, 33, 18, -10, -14, 1, 1, 7, 42, -16, -34, 23, -15, 27, 30, 47, 39, 36, -4, 7, 0, 7, -14, -6, 58, -18, 19, 9, -7, 39, -8, 8, 51, 28, -25, 19, 13, 12, 41, 11, 4, 44, 14, 11, -16, -33, 17, 49, -19, -13, 34, -39, -2, -13, 19, 3, 25, -24, -6, 3, -4, 36, 19, 22, 53, 65, -18, 9, -19, -8, -1, 19, 21, 3, -30, 3, 7, 6, -8, 21, 23, 69, -14, 9, 10, -2, -16, -13, 44, -6, 6, -10, 21, 34, -35, -24, -1, 4, -7, -11, 21, 5, 27, 9, -17, 32, 14, 20, 10, -70, 60, 102, -40, -30, 37, -35, 7, 14, -7, 6, 8, -21, -13, -19, -25, 13, 23, 36, 16, 18, -8, -4, 4, -19, -37, 27, 40, -13, -9, -13, -7, 31, -14, 26, 33, 27, -19, 23, -7, 2, -10, 8, 37, -37, -1, -18, -16, 37, -26, -26, -6, -4, 9, 11, 24, 36, 27, 6, -11, 30, 26, 40, -3, -26, 51, 38, -37, -62, 32, -20, -9, -34, -8, 14, 32, -24, -44, -12, -15, -21, 11, 51, 4, 19, 15, -2, -31, -14, 4, 10, 13, -9, -18, -4, -23, 34, 0, 10, 41, 50, -30, 9, -2, 1, -46, -13, 41, -26, -23, -5, -15, 25, -7, 6, 22, 55, -29, -1, 2, -14, 57, 14, -14, 32, -4, 35, -8, -21, 42, 87, -36, -58, 33, -44, 7, -20, 8, -5, -34, -27, -28, -20, -22, -35, 56, 19, 3, 14, -25, -7, -31, -15, -14, -19, -9, -16, -20, -9, -20, -2, 3, -26, 31, 34, -29, 14, -19, -8, -9, 0, 28, 0, -18, 0, -18, 2, -16, -35, -4, -10, -17, -16, 36, -12, 54, -11, -20, 47, 0, 42, 10, -39, 27, 61, -27, -64, 49, -16, -2, 12, -13, 12, -21, -16, -8, -1, 4, -47, 28, 63, 6, 20, 2, -28, -26, -12, -7, -15, 22, -17, -11, -8, -17, -25, -22, 1, 9, 9, -26, 4, -43, -9, -9, -3, 28, -1, -34, -13, -6, 11, -21, 6, 6, 11, -47, -44, 2, 6, 38, -3, -25, 25, 16, 14, -3, -38, 39, 59, -35, -86, 44, -2, 14, 6, -23, -13, -20, -26, -32, -4, -16, -42, 37, 15, 31, 9, 18, -6, -1, -7, -6, -6, -30, 3, 0, -4, -23, 15, 9, -47, 22, 11, 0, 12, -19, -12, -28, -17, -16, -9, -14, -11, -3, 4, -17, -8, -33, 1, -47, -30, 21, 5, 41, -2, -12, 17, -6, 13, -3, -22, 14, 35, -41, -69, 36, -15, 10, 0, 17, -3, 1, -9, -23, -15, -20, -52, 31, -4, 27, 14, 30, -14, -4, 15, -16, 1, -17, -31, -19, -7, -29, 15, -18, 7, 9, 11, -23, 14, -37, -41, -49, 6, -24, -31, 12, -8, -13, -6, -15, -16, 7, 0, -24, -12, 11, 18, 34, -3, -27, 55, 11, 30, -5, -35, 43, 67, -28, -27, 51, -19, 6, 3, -16, -1, 21, -24, -24, -2, -33, -18, 1, 8, -6, 30, 12, 3, -19, -12, -15, 25, 4, -3, -19, 2, -10, 28, -21, -25, -16, 21, -12, 13, -44, -7, -29, 16, 27, -13, -17, -8, -4, 6, -45, -19, -58, 14, -44, -16, 18, -7, 30, 3, -16, 43, -9, 37, 15, -42, 40, 60, -14, -59, 24, -9, -5, 9, 4, -14, 25, -13, -47, -23, 22, -5, 28, 18, 16, 35, -16, 1, 2, -1, -22, 10, 33, -16, 7, -17, -6, 16, -2, -19, 25, 25, -37, 18, -25, -2, -21, -9, 45, -29, 3, -1, -22, 56, -27, -47, 53, 5, -15, 15, 25, 31, 43, -5, -18, 48, -12, 30, 2, -46, 30, 73, -62, -59, 25, -17, 24, 9, 7, -10, 29, -19, -36, -15, -11, -22, 20, 36, -2, 37, 11, 7, 7, 7, -6, 15, 46, -35, -6, -21, -16, 34, -6, 2, 40, 23, -11, 1, -43, -30, -27, 28, 13, -20, -3, -10, -13, 36, -18, -49, -27, -6, -46, 0, -7, 5, 50, -16, -17, 33, 15, 29, -8, -23, 34, 32, -51, -34, 36, -38, 11, -24, -10, -17, 16, -9, -27, 13, -1, 10, 23, 1, 14, 17, -6, -4, 1, -4, -5, -18, 22, -18, -5, -12, 2, 50, -1, -7, -6, 31, -12, 3, -10, 2, -4, 2, 9, -5, 11, 8, -4, 65, -19, -31, -36, 21, -10, 32, -33, -10, 14, 11, -72, 13, -24, 2, -3, -39, 9, 61, -12, -13, 20, -29, -3, -6, -2, 5, 16, 11, -28, 9, 7, 3, -3, 24, 19, 33, -24, 16, 1, 7, -28, 7, 34, 30, -18, -5, 30, 42, 28, -73, 4, 50, -38, 47, 3, -8, -11, 8, 49, 44, -13, 46, -9, 30, 41, -8, -44, 37, 1, 51, 
  8, 16, -20, -7, -42, -12, 36, -8, 35, 34, -4, -51, -18, -23, 20, 31, 0, 1, 0, 5, 3, 10, -5, -12, -8, 17, 2, 12, -3, 7, 10, -16, 25, -2, -10, -31, 46, -13, 6, 14, 20, 23, -11, -7, -21, -27, -10, 18, -2, 22, -19, 1, -23, 10, 8, 10, 17, -3, 4, -25, -21, 18, 6, 25, 32, 62, -28, -5, -25, -23, 28, 23, 54, 27, -21, -44, -36, -29, 24, -1, -42, 10, 8, -3, 29, -18, -22, -2, 6, 11, -23, -5, -40, 28, 12, -15, -11, -9, -14, 9, 0, -1, 29, -7, 34, 20, -16, -48, -13, -12, 3, 24, -10, 1, 2, 6, -35, 16, 26, 14, 50, -4, -6, -17, 20, 13, 3, 6, 25, 25, -52, -6, -26, -44, 38, -20, 30, 20, -19, -115, -12, -32, 43, 29, -8, 52, 12, 7, 18, 8, 10, -20, 24, 14, -2, -19, 2, 8, -6, 33, -1, 8, 3, 3, -15, 12, 57, -8, 29, 9, -24, -26, -12, -5, 4, 22, 8, -2, 19, 24, -18, 20, 27, 17, 35, 22, 10, -17, -37, 22, 5, 26, 26, 23, -33, -5, -15, -35, 20, 18, 44, 28, -29, -56, 1, -22, 48, 24, 22, -10, 3, 3, 0, 0, 4, -6, 21, 29, -25, 27, 0, 4, 7, 19, 0, 47, -9, 28, -4, -4, 54, 2, 49, 39, 7, 18, -29, -4, 12, -5, 4, 10, -3, 37, -31, -1, 20, 2, -1, -13, 13, 18, -10, -30, -13, 9, 24, 19, -50, -15, -40, -54, 35, -4, 25, 46, -48, -88, -27, -40, 34, 24, -13, 18, -21, -4, 6, -18, -13, -24, 16, 26, -31, 10, -13, -3, 2, -3, -5, 26, 7, -8, 12, -30, 34, 16, 18, 11, -3, -13, 9, -3, -4, 24, 10, -21, -21, -27, -9, -16, 29, 2, 19, 21, -10, 15, -21, 17, -16, 29, -8, 10, -57, 26, -4, -23, 10, -28, 8, 38, -62, -61, -30, -38, 9, 12, 1, -31, -4, -9, -19, -16, -22, 9, -15, -4, -5, -15, -19, -18, -9, -3, -7, -21, -12, 11, 30, 5, 24, 17, 17, 35, -15, -20, 35, -13, -4, 40, -4, -9, 24, 23, -20, 4, 28, -5, 38, 11, -26, -9, -76, 1, 36, 28, -2, 12, -43, -4, -22, -13, 16, -36, 10, 24, -42, -127, 8, -37, 49, 1, -22, -21, 10, -3, 26, -13, -22, 15, 9, 11, -16, -12, -65, 3, 9, 1, -25, -24, -13, -3, 17, -6, 9, 18, 7, 39, 7, -29, 14, 6, 1, -6, 28, 15, -4, -1, 25, -22, 21, 26, 19, -10, -17, 1, 40, -9, 6, 0, -9, 34, -47, 11, -31, -17, 34, -22, 19, 34, -30, -75, -14, -17, 29, 16, 12, 21, 15, 12, 28, 12, 15, -3, 11, 7, -3, -22, -24, -6, 8, 27, -15, -26, 4, -18, -11, -6, 24, 11, -3, 22, -11, -5, 23, 28, 9, -21, 7, 9, -11, -15, 63, 6, -2, -4, -6, 14, -4, 14, 11, 6, 32, 27, 23, 9, -37, 7, -19, -7, 12, 1, 21, 33, -32, -125, -6, -9, 15, 12, -7, -40, -6, 3, 12, -11, 24, 18, -4, 21, 8, -4, 12, 2, 22, 21, 4, 6, -16, -30, 20, -12, 20, 8, 3, 40, -23, -23, 9, 16, -11, 45, 4, 62, 0, -17, -12, -9, 51, -8, 9, 41, -12, -4, 42, -9, -2, 18, -9, 18, -29, -3, -17, -23, 38, -11, 41, 0, -56, -98, -8, -13, 38, 19, -16, 6, 6, -6, -13, -11, -19, -7, -11, 35, -4, -5, -39, -2, 3, 46, -7, -7, 2, 3, 13, -8, 16, -13, -1, 25, -14, -5, -10, -8, -29, 19, 13, 9, -17, 12, 9, -5, 31, -1, 25, -15, 1, 6, -66, 31, 10, -1, 7, -47, -14, -7, -15, -26, 43, -30, 46, 35, -24, -79, 9, -27, 27, 11, -7, -17, 12, 12, 12, -3, -4, 5, -6, 43, 3, 2, 8, -8, -1, 45, -26, 35, -2, -6, 19, 8, 26, 20, 5, 13, -16, -15, 20, -19, -5, 16, 26, 5, 29, -15, -7, -3, -22, -7, -2, -20, 6, -4, 7, 21, 23, -17, 41, 37, 0, 14, -2, -8, 26, -1, 62, 41, -27, -51, -44, -26, 24, 28, -16, 21, -1, 25, 2, -13, 33, 0, 25, -22, 10, 28, -20, -12, 29, 20, -11, -20, -2, -12, 24, -11, 18, 23, 12, 10, -12, -32, 18, 17, 1, -6, -2, 22, -7, -4, -11, -16, -20, -12, 16, -18, 7, 12, 18, 0, 31, -10, 55, 10, 12, -30, 15, 35, 58, 13, 20, 34, -24, -40, -13, -29, 18, 69, 21, -15, 8, -2, 31, 23, -9, 6, 34, 28, 40, 2, -32, -13, 2, -6, -12, 14, -3, -4, -2, -4, 20, -17, -16, -4, 4, 0, 22, -3, -29, -13, 24, -2, -3, 1, -36, -21, -2, -33, 25, -18, -4, 5, 7, -2, 11, -10, 
  -27, -19, 4, -1, -3, -21, -34, -37, -12, -5, 13, -16, 15, 36, -45, -5, -1, -8, -4, 12, -5, 21, 24, -12, -8, -17, 1, 8, -26, -61, -1, -1, -12, 5, 1, 3, -59, 4, 1, -4, -6, -78, -21, -7, -14, -32, 15, -39, 3, -35, 10, -17, -27, -18, -42, -8, -2, -55, 10, -6, -25, -53, -20, -52, -6, -11, -4, 11, 21, -16, -24, -23, -53, -2, -27, 28, 51, 67, -63, 4, 4, -10, 8, -20, -40, 18, 8, 9, 2, 1, -38, -8, -3, -43, 6, 5, -7, 0, 29, 4, -42, 16, -20, 8, -11, -60, -16, 32, -27, -67, 0, 5, -22, -5, 39, -20, 0, 17, -8, 7, -47, -40, 24, -11, -41, -21, -16, -44, -28, -17, -12, 4, 45, -17, -40, -24, -59, -4, -47, 58, 64, 40, -55, -19, -19, -38, 18, 15, -22, 7, 34, -5, -21, -2, -18, -26, -33, -47, 6, -26, 21, 13, 11, 0, -21, 4, -31, 4, -17, -51, 14, 30, 1, -45, 7, -21, 10, -26, 11, -7, -21, 0, -10, 6, -24, -47, 17, 27, 38, -6, 1, -13, -11, -42, 0, -2, 62, 6, -21, -1, -38, -5, -4, 33, 25, 56, -61, -14, -15, 3, 2, -9, -21, 13, 15, -6, 5, -4, -5, -56, 13, -9, -18, -5, -7, -16, 18, -20, -21, 12, -37, -21, 11, -66, 19, 8, -9, -25, -5, -6, -5, 27, 14, -7, 10, 13, 5, 8, 17, -15, 20, 17, 18, -22, 6, -23, -20, -7, -3, 11, 32, 3, -42, -4, -28, -5, -5, 27, 32, 42, -56, -9, -4, 8, 15, -8, 13, 20, 23, -8, -11, -3, -24, -44, 1, -14, -4, 9, 9, -3, 3, -5, -47, 11, -28, 14, -1, -52, 11, -6, -48, -25, 9, -10, 9, 15, 9, 22, -39, 25, -14, 14, 14, -18, 2, -2, 2, -16, 20, 5, -13, 15, -9, -6, 29, -20, -18, 13, -9, 3, 14, -30, 51, 55, -50, 25, 2, 7, 13, -6, 21, 17, 31, 27, 5, 18, -14, -28, 20, -10, 34, 31, 21, 40, 43, -10, -8, 30, 4, -10, -16, -42, 29, 7, -18, 12, 14, -27, 24, 28, 17, -15, -1, 16, -26, 19, -6, -9, 16, 29, 22, 17, -2, 18, -29, -7, -8, 9, 19, -46, -38, -24, -22, 6, -4, 51, 37, 44, -54, 9, -17, 11, -6, 10, 25, -1, 22, -5, 11, 50, -33, -34, 27, 24, 3, 25, 21, 27, 7, 19, -14, 19, 1, -3, -10, -40, 28, 30, -50, -37, 6, -23, 3, 20, 36, -9, 28, 17, -23, 21, -10, 3, 5, -10, -14, -1, -3, -1, -39, -19, 4, 11, 32, -18, -41, -17, -22, -12, 0, 6, 47, 67, -44, 14, 13, -29, 1, -15, -5, 7, 8, -3, 12, 41, -19, -12, -6, 21, 12, 24, 34, 17, 22, 9, 12, 3, 6, -6, -7, -40, 18, 5, -27, -22, 15, 25, 4, -13, 8, -4, -34, 18, -6, 16, -4, -17, 37, 1, -12, -11, 9, -22, -40, 21, 13, -13, 42, 2, -49, -20, -43, -1, 23, 41, 28, 47, -51, 6, 16, 7, -8, 17, -20, 9, 15, 19, 13, -25, -32, -15, 9, -25, 22, -24, 3, -7, 8, 11, -25, 18, -23, -1, -3, -30, 26, 31, -13, -36, -9, -18, 12, -13, 41, -19, 0, 31, -18, 24, -2, -16, 14, 21, -2, 11, -1, 1, -2, -44, -8, 4, 35, -9, -32, -7, -37, -2, -13, 16, 54, 49, -52, 19, 1, -18, -7, -7, -38, 25, 16, -4, 20, -19, -21, -29, -11, -15, 2, -16, 6, -9, 38, -4, -47, 30, -11, 15, -14, -42, 18, 38, -39, -15, 4, -14, -2, -4, 10, 4, -26, 26, -17, 22, -36, -30, 27, 6, -6, -36, 8, 0, -32, -10, -16, 7, 28, -9, -47, 3, -36, 15, -4, 0, 45, 38, -65, 2, 1, 18, 1, -2, -27, 21, 15, 5, -2, 0, -22, -38, -16, -53, -8, -24, -3, -13, 13, -9, -38, -7, -15, -6, -19, -45, 17, 7, -42, -40, 20, -2, -12, 1, 17, -26, -35, 0, 10, -4, -10, -26, 2, 17, 7, -32, 8, -10, -36, -25, -3, -4, 36, -10, -41, -9, -22, -6, -11, 2, 46, 23, -33, 2, -6, 6, -22, -13, 15, 14, -5, 1, 1, -14, -57, -25, 21, -18, -7, -32, 8, 16, 21, -22, -37, 5, -13, 0, -3, -48, -2, 1, -68, -34, 19, -27, 0, 16, 19, -11, 33, 3, -8, 3, 6, -31, 18, 20, -24, -49, 10, 17, -20, -12, -10, -7, 24, -7, -20, -29, -12, -8, 41, -50, 34, 12, -57, -16, -15, 8, -15, -10, -40, -3, 40, -11, -13, -10, -54, -40, -7, -41, -6, -26, -2, 23, 2, 9, -52, -24, -32, -10, 3, -44, -30, 47, -55, -47, 34, -20, -7, 19, -10, -20, -31, -16, 19, -12, 26, -6, -5, -19, 6, -51, -19, -23, 
};
const TfArray<2, int> tensor_dimension91 = { 2, { 3,832 } };
const TfArray<1, float> quant91_scale = { 1, { 0.0043556615710258484, } };
const TfArray<1, int> quant91_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data92[3] = { 21, 464, -345, };
const TfArray<1, int> tensor_dimension92 = { 1, { 3 } };
const TfArray<1, float> quant92_scale = { 1, { 0.00013081356883049011, } };
const TfArray<1, int> quant92_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<2, int> tensor_dimension93 = { 2, { 1,3 } };
const TfArray<1, float> quant93_scale = { 1, { 0.2068178802728653, } };
const TfArray<1, int> quant93_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 3 } };
const TfLiteStridedSliceParams opdata1 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs1 = { 4, { 3,4,5,6 } };
const TfArray<1, int> outputs1 = { 1, { 7 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 7,8,9 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteStridedSliceParams opdata4 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs4 = { 4, { 11,12,13,14 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 15,16,17 } };
const TfArray<1, int> outputs5 = { 1, { 18 } };
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 18 } };
const TfArray<1, int> outputs6 = { 1, { 19 } };
const TfLiteStridedSliceParams opdata7 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs7 = { 4, { 19,20,21,22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteStridedSliceParams opdata8 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs8 = { 4, { 3,24,25,26 } };
const TfArray<1, int> outputs8 = { 1, { 27 } };
const TfArray<2, int> inputs9 = { 2, { 27,28 } };
const TfArray<1, int> outputs9 = { 1, { 29 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 29,8,9 } };
const TfArray<1, int> outputs10 = { 1, { 30 } };
const TfLiteStridedSliceParams opdata11 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs11 = { 4, { 30,31,32,33 } };
const TfArray<1, int> outputs11 = { 1, { 34 } };
const TfLitePoolParams opdata12 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs12 = { 1, { 34 } };
const TfArray<1, int> outputs12 = { 1, { 35 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 35,16,17 } };
const TfArray<1, int> outputs13 = { 1, { 36 } };
const TfLiteStridedSliceParams opdata14 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs14 = { 4, { 36,37,38,39 } };
const TfArray<1, int> outputs14 = { 1, { 40 } };
const TfLitePoolParams opdata15 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs15 = { 1, { 40 } };
const TfArray<1, int> outputs15 = { 1, { 41 } };
const TfLiteStridedSliceParams opdata16 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs16 = { 4, { 41,42,43,44 } };
const TfArray<1, int> outputs16 = { 1, { 45 } };
const TfLiteStridedSliceParams opdata17 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs17 = { 4, { 3,46,47,48 } };
const TfArray<1, int> outputs17 = { 1, { 49 } };
const TfArray<2, int> inputs18 = { 2, { 49,50 } };
const TfArray<1, int> outputs18 = { 1, { 51 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 51,8,9 } };
const TfArray<1, int> outputs19 = { 1, { 52 } };
const TfLiteStridedSliceParams opdata20 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs20 = { 4, { 52,53,54,55 } };
const TfArray<1, int> outputs20 = { 1, { 56 } };
const TfLitePoolParams opdata21 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs21 = { 1, { 56 } };
const TfArray<1, int> outputs21 = { 1, { 57 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 57,16,17 } };
const TfArray<1, int> outputs22 = { 1, { 58 } };
const TfLiteStridedSliceParams opdata23 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs23 = { 4, { 58,59,60,61 } };
const TfArray<1, int> outputs23 = { 1, { 62 } };
const TfLitePoolParams opdata24 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs24 = { 1, { 62 } };
const TfArray<1, int> outputs24 = { 1, { 63 } };
const TfLiteStridedSliceParams opdata25 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs25 = { 4, { 63,64,65,66 } };
const TfArray<1, int> outputs25 = { 1, { 67 } };
const TfLiteStridedSliceParams opdata26 = { 13, 15, 0, 0, 0 };
const TfArray<4, int> inputs26 = { 4, { 3,68,69,70 } };
const TfArray<1, int> outputs26 = { 1, { 71 } };
const TfArray<2, int> inputs27 = { 2, { 71,72 } };
const TfArray<1, int> outputs27 = { 1, { 73 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 73,8,9 } };
const TfArray<1, int> outputs28 = { 1, { 74 } };
const TfLiteStridedSliceParams opdata29 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs29 = { 4, { 74,75,76,77 } };
const TfArray<1, int> outputs29 = { 1, { 78 } };
const TfLitePoolParams opdata30 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs30 = { 1, { 78 } };
const TfArray<1, int> outputs30 = { 1, { 79 } };
const TfArray<2, int> inputs31 = { 2, { 79,80 } };
const TfArray<1, int> outputs31 = { 1, { 81 } };
const TfLiteConvParams opdata32 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs32 = { 3, { 81,16,17 } };
const TfArray<1, int> outputs32 = { 1, { 82 } };
const TfLiteStridedSliceParams opdata33 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs33 = { 4, { 82,83,84,85 } };
const TfArray<1, int> outputs33 = { 1, { 86 } };
const TfLitePoolParams opdata34 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs34 = { 1, { 86 } };
const TfArray<1, int> outputs34 = { 1, { 87 } };
const TfLiteConcatenationParams opdata35 = { 1, kTfLiteActNone };
const TfArray<4, int> inputs35 = { 4, { 23,45,67,87 } };
const TfArray<1, int> outputs35 = { 1, { 88 } };
const TfLiteReshapeParams opdata36 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs36 = { 2, { 88,89 } };
const TfArray<1, int> outputs36 = { 1, { 90 } };
const TfLiteFullyConnectedParams opdata37 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs37 = { 3, { 90,91,92 } };
const TfArray<1, int> outputs37 = { 1, { 93 } };
const TfLiteSoftmaxParams opdata38 = { 1 };
const TfArray<1, int> inputs38 = { 1, { 93 } };
const TfArray<1, int> outputs38 = { 1, { 1 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension1, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3760), (TfLiteIntArray*)&g0::tensor_dimension3, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1568), (TfLiteIntArray*)&g0::tensor_dimension7, 195, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1568), (TfLiteIntArray*)&g0::tensor_dimension11, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension19, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4592), (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension27, 234, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension29, 247, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 1976, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension34, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension35, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension36, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension40, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension41, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4400), (TfLiteIntArray*)&g0::tensor_dimension45, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data46, (TfLiteIntArray*)&g0::tensor_dimension46, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data47, (TfLiteIntArray*)&g0::tensor_dimension47, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data48, (TfLiteIntArray*)&g0::tensor_dimension48, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 234, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data50, (TfLiteIntArray*)&g0::tensor_dimension50, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension51, 247, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 1976, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data53, (TfLiteIntArray*)&g0::tensor_dimension53, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data54, (TfLiteIntArray*)&g0::tensor_dimension54, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data55, (TfLiteIntArray*)&g0::tensor_dimension55, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension56, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension57, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data59, (TfLiteIntArray*)&g0::tensor_dimension59, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data60, (TfLiteIntArray*)&g0::tensor_dimension60, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data61, (TfLiteIntArray*)&g0::tensor_dimension61, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension62, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension63, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data64, (TfLiteIntArray*)&g0::tensor_dimension64, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data65, (TfLiteIntArray*)&g0::tensor_dimension65, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data66, (TfLiteIntArray*)&g0::tensor_dimension66, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3344), (TfLiteIntArray*)&g0::tensor_dimension67, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data68, (TfLiteIntArray*)&g0::tensor_dimension68, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data69, (TfLiteIntArray*)&g0::tensor_dimension69, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data70, (TfLiteIntArray*)&g0::tensor_dimension70, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data72, (TfLiteIntArray*)&g0::tensor_dimension72, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1776), (TfLiteIntArray*)&g0::tensor_dimension73, 221, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension74, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data75, (TfLiteIntArray*)&g0::tensor_dimension75, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data76, (TfLiteIntArray*)&g0::tensor_dimension76, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data77, (TfLiteIntArray*)&g0::tensor_dimension77, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1776), (TfLiteIntArray*)&g0::tensor_dimension78, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension79, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data80, (TfLiteIntArray*)&g0::tensor_dimension80, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension81, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension82, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data83, (TfLiteIntArray*)&g0::tensor_dimension83, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data84, (TfLiteIntArray*)&g0::tensor_dimension84, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data85, (TfLiteIntArray*)&g0::tensor_dimension85, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension86, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension87, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension88, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant88))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data89, (TfLiteIntArray*)&g0::tensor_dimension89, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension90, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant90))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data91, (TfLiteIntArray*)&g0::tensor_dimension91, 2496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data92, (TfLiteIntArray*)&g0::tensor_dimension92, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension93, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant93))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[39] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[39] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONCATENATION, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 94, };
const size_t tflNodes_subgraph_index[] = {0, 39, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  1, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3117_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 94;
  for (size_t i = 0; i < 94; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_STRIDED_SLICE] = Register_STRIDED_SLICE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_CONCATENATION] = Register_CONCATENATION();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3117_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3117_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3117_invoke() {
  for (size_t i = 0; i < 39; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3117_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
