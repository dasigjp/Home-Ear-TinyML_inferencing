/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
<<<<<<< HEAD
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
=======
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
<<<<<<< HEAD
// Generated on: 18.02.2025 13:12:50
=======
// Generated on: 12.02.2025 05:23:49
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 16
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 32
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
<<<<<<< HEAD
constexpr int kTensorArenaSize = 10528;
#else
constexpr int kTensorArenaSize = 9504;
=======
constexpr int kTensorArenaSize = 22048;
#else
constexpr int kTensorArenaSize = 21024;
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_PAD, OP_CONCATENATION, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 5;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 5;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
<<<<<<< HEAD
const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.044129479676485062, } };
=======
const TfArray<2, int> tensor_dimension0 = { 2, { 1,2587 } };
const TfArray<1, float> quant0_scale = { 1, { 0.041862968355417252, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant0_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const TfArray<2, int> tensor_dimension1 = { 2, { 1,3 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant1_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
<<<<<<< HEAD
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 49, 13, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension3 = { 4, { 1,49,13,1 } };
const TfArray<1, float> quant3_scale = { 1, { 0.044129479676485062, } };
=======
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 199, 13, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension3 = { 4, { 1,199,13,1 } };
const TfArray<1, float> quant3_scale = { 1, { 0.041862968355417252, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant3_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
<<<<<<< HEAD
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 0, -34, 0, 0, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension7 = { 4, { 1,15,13,1 } };
const TfArray<1, float> quant7_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant7_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 42, -47, 84, 
  /* [0][1][][] */ 92, -127, 90, 
  /* [0][2][][] */ 90, -93, 55, 
  /* [1][0][][] */ -113, -8, -51, 
  /* [1][1][][] */ 127, -94, 20, 
  /* [1][2][][] */ -43, 120, 19, 
  /* [2][0][][] */ 6, 106, -101, 
  /* [2][1][][] */ -15, 103, -127, 
  /* [2][2][][] */ -46, 84, -106, 
  /* [3][0][][] */ -3, -46, 45, 
  /* [3][1][][] */ -99, -28, -80, 
  /* [3][2][][] */ 127, 54, 58, 
  /* [4][0][][] */ -33, -5, -65, 
  /* [4][1][][] */ 62, -96, 90, 
  /* [4][2][][] */ -32, 127, -47, 
  /* [5][0][][] */ -58, 116, -69, 
  /* [5][1][][] */ -72, 127, -78, 
  /* [5][2][][] */ -73, 118, -88, 
  /* [6][0][][] */ 69, 127, 38, 
  /* [6][1][][] */ 38, -84, 12, 
  /* [6][2][][] */ -104, -54, -61, 
  /* [7][0][][] */ 78, 127, 51, 
  /* [7][1][][] */ 59, 124, 69, 
  /* [7][2][][] */ 30, 100, 59, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.002450733445584774, 0.0030240761116147041, 0.0023215636610984802, 0.0036533609963953495, 0.0027091989759355783, 0.0016800557496026158, 0.0030741463415324688, 0.0020088255405426025, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[8] = { -2391, -1708, -3163, -1886, -1754, -2100, -1636, -2502, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 0.00010814959387062117, 0.00013345089973881841, 0.00010244939767289907, 0.00016122091619763523, 0.00011955553782172501, 7.4139985372312367e-05, 0.00013566047709900886, 8.8648426753934473e-05, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,15,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,8,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.020785605534911156, } };
=======
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 0, -148, 0, 0, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension7 = { 4, { 1,51,13,1 } };
const TfArray<1, float> quant7_scale = { 1, { 0.041862968355417252, } };
const TfArray<1, int> quant7_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 100, -59, 7, 
  /* [0][1][][] */ 114, -127, 10, 
  /* [0][2][][] */ 108, -121, -24, 
  /* [1][0][][] */ -80, -46, -70, 
  /* [1][1][][] */ 127, -51, 66, 
  /* [1][2][][] */ -53, 101, -11, 
  /* [2][0][][] */ 38, 124, -127, 
  /* [2][1][][] */ -28, 17, -110, 
  /* [2][2][][] */ 15, 69, -86, 
  /* [3][0][][] */ -51, -74, -1, 
  /* [3][1][][] */ -80, 36, -63, 
  /* [3][2][][] */ 127, 28, 70, 
  /* [4][0][][] */ 101, -102, 47, 
  /* [4][1][][] */ 119, -127, 73, 
  /* [4][2][][] */ 38, -22, 25, 
  /* [5][0][][] */ -61, -41, -19, 
  /* [5][1][][] */ 127, 82, 29, 
  /* [5][2][][] */ -83, -44, -16, 
  /* [6][0][][] */ -50, 127, -30, 
  /* [6][1][][] */ -83, 40, -44, 
  /* [6][2][][] */ -86, -1, -117, 
  /* [7][0][][] */ 20, 92, 23, 
  /* [7][1][][] */ -3, 127, 6, 
  /* [7][2][][] */ -25, 121, -6, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0014760622289031744, 0.0038183594588190317, 0.0017321641789749265, 0.0033941206056624651, 0.0018788998713716865, 0.0019944100640714169, 0.0014988799812272191, 0.0016283678123727441, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[8] = { -1632, -725, -935, -944, -1004, -1005, -2289, -993, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 6.1792343331035227e-05, 0.00015984785568434745, 7.2513532359153032e-05, 0.00014208797074388713, 7.8656325058545917e-05, 8.3491926488932222e-05, 6.2747567426413298e-05, 6.8168308644089848e-05, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,51,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.016621781513094902, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,26,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.016621781513094902, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data13[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension15 = { 4, { 1,7,7,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[16*3*3*8] = { 
  /* [0][0][][] */ 32,-11,91,8,-22,49,7,-12, 67,-2,3,-51,-46,-32,70,-66, -6,7,14,-7,-83,16,-41,-39, 
  /* [0][1][][] */ -26,40,127,27,42,-10,-58,-35, -54,66,-8,33,0,-10,-17,-24, -37,7,37,41,24,31,-43,-23, 
  /* [0][2][][] */ -8,39,-27,-14,26,95,75,-9, 71,18,-39,-12,-33,29,-33,-31, 8,2,22,-8,-12,20,70,50, 
  /* [1][0][][] */ 6,70,60,19,40,11,13,14, -10,-28,-38,20,17,53,29,51, 47,-23,12,-30,-54,-54,6,-30, 
  /* [1][1][][] */ 25,8,76,-2,-68,-21,28,-41, 49,26,25,-47,-23,28,25,-41, 49,-6,0,-12,-6,41,-3,-54, 
  /* [1][2][][] */ -7,-54,95,-59,65,127,2,-68, -85,-37,7,-24,33,53,-12,-20, -105,-13,66,38,22,-19,-85,-41, 
  /* [2][0][][] */ -2,43,7,54,33,-36,65,3, 27,46,4,80,33,-34,37,18, -45,15,1,-34,-36,-36,49,-2, 
  /* [2][1][][] */ 34,68,-3,54,-18,-26,127,-10, -20,76,-27,24,59,-12,-4,-45, -40,-63,31,22,5,-55,9,-28, 
  /* [2][2][][] */ 16,60,-9,62,-5,-7,-39,-35, -56,101,18,122,62,-8,58,-1, -1,-28,-21,20,-71,-75,-40,-23, 
  /* [3][0][][] */ 26,-68,70,-62,101,11,-107,11, 40,-92,-79,46,-52,-127,-55,-25, -80,-25,-52,-70,10,-68,-5,36, 
  /* [3][1][][] */ 43,-94,36,-12,-16,-75,-96,17, -39,-19,-113,-47,-98,-48,-60,52, -119,-10,64,32,-89,-45,17,45, 
  /* [3][2][][] */ 28,5,78,-75,78,61,-7,10, -115,-59,-60,-78,-72,-124,11,53, -71,-63,37,-124,0,-52,-6,32, 
  /* [4][0][][] */ -44,-56,-55,-56,-50,-80,1,63, -107,-24,-96,-74,-109,-39,-32,47, 10,-33,28,-48,-63,85,-59,68, 
  /* [4][1][][] */ -99,-6,-23,-11,36,26,36,34, -37,87,-64,76,-10,-21,-10,98, -11,-30,48,59,7,-12,-8,-1, 
  /* [4][2][][] */ -127,-32,-17,-46,-66,-35,1,-79, -58,8,-73,-18,-41,-70,-56,107, -33,11,25,-37,29,22,-103,82, 
  /* [5][0][][] */ -21,4,3,35,-26,-68,-24,-14, -59,45,-6,26,89,37,-84,-46, -27,45,-4,47,-7,-45,6,13, 
  /* [5][1][][] */ -18,31,24,11,25,-44,-20,-66, -18,24,1,101,48,47,127,3, 11,11,-1,92,-53,-22,61,-21, 
  /* [5][2][][] */ 26,17,-20,39,-57,-6,-22,-36, 11,81,-42,85,51,-38,23,-57, 7,38,-33,67,-41,-42,1,-75, 
  /* [6][0][][] */ 71,-72,23,-34,-75,-7,-33,-111, 87,-29,29,-30,-48,89,-32,18, -11,-55,-53,25,-18,-29,-52,-23, 
  /* [6][1][][] */ -22,-85,58,-89,-67,26,-46,-127, 84,-20,-18,-64,5,99,-20,7, 43,23,8,-77,-43,4,55,20, 
  /* [6][2][][] */ 33,-111,65,-65,-94,2,-84,-120, 101,-23,17,-35,39,64,-61,37, -6,1,-2,44,-38,-71,-46,-63, 
  /* [7][0][][] */ -17,65,23,-54,-39,91,37,-1, 104,94,42,37,71,103,-7,46, -58,-1,-98,-16,-32,-58,50,-25, 
  /* [7][1][][] */ -8,66,24,-45,77,31,45,102, 5,61,-26,75,7,122,86,46, -111,-41,-40,1,-56,-54,-17,32, 
  /* [7][2][][] */ -94,-65,20,-17,-30,-47,12,28, -52,-21,-54,30,86,17,-87,-52, -88,-18,-2,-63,-127,6,43,-46, 
  /* [8][0][][] */ 127,-93,89,-22,-19,120,51,6, -22,-64,-63,-13,-14,8,-2,12, 11,-41,24,12,-18,49,-31,-28, 
  /* [8][1][][] */ 41,-76,115,-39,-18,-23,-5,-42, -7,4,-22,-20,-43,56,-30,8, -39,-64,-24,-51,-24,30,53,8, 
  /* [8][2][][] */ 80,-117,99,-96,-35,119,-21,-3, 112,-47,35,-52,-6,4,-55,27, 19,-19,-32,10,-27,-6,16,-74, 
  /* [9][0][][] */ 61,-77,-39,-51,-67,61,-19,33, 24,-78,10,-63,-19,102,-74,98, 30,-82,-64,-12,-89,35,-9,77, 
  /* [9][1][][] */ 1,-15,-95,-66,-74,119,-59,56, 26,-123,92,-91,-21,52,-82,31, 8,-50,12,-42,-46,47,-31,-17, 
  /* [9][2][][] */ -30,5,-62,-61,-34,28,-123,1, 76,-82,42,-65,-24,76,-91,127, 11,-43,-41,-20,1,69,-52,15, 
  /* [10][0][][] */ 17,21,24,92,45,-73,122,23, -66,6,-8,7,-10,-36,1,-31, -63,10,-58,-11,-23,-17,-60,47, 
  /* [10][1][][] */ 21,86,-2,127,13,-9,124,37, -13,13,38,6,-39,-74,76,24, -26,46,-83,-7,-18,-20,-26,34, 
  /* [10][2][][] */ 43,56,12,75,104,-76,120,-19, -98,69,14,-2,18,1,-12,-45, -81,4,-51,-35,-54,-67,-14,12, 
  /* [11][0][][] */ -8,72,16,92,77,-11,9,-45, -59,-9,8,9,63,-31,25,21, -50,-32,-14,-14,-63,-22,-53,15, 
  /* [11][1][][] */ 7,103,8,-33,6,-16,61,-71, -52,24,-33,-11,-22,-5,0,-25, -62,-41,20,-8,-75,3,-31,7, 
  /* [11][2][][] */ -4,38,2,127,73,16,63,-51, -1,50,-22,29,22,-20,-80,-25, -14,-56,13,4,-44,-14,53,21, 
  /* [12][0][][] */ -87,34,-45,19,-19,-42,65,-32, -54,-39,-66,-23,-57,-25,-5,61, 17,-18,50,-2,23,14,-40,16, 
  /* [12][1][][] */ -127,-18,-22,8,-6,0,-3,-13, -42,-13,-54,-24,-38,-40,-9,10, 9,-22,37,-27,-10,16,-25,31, 
  /* [12][2][][] */ -87,-23,-38,-53,1,-42,-58,-29, -61,-8,-30,70,-34,-53,21,-10, 14,-33,43,-24,4,24,6,1, 
  /* [13][0][][] */ -53,-7,-29,-53,-70,14,29,-67, -55,-25,-95,-37,-98,-36,-13,66, -37,-39,70,-15,34,-8,-54,76, 
  /* [13][1][][] */ -72,37,-9,-18,-14,-67,1,-37, -97,-26,-114,-85,-127,-1,-26,30, -62,-93,36,-60,21,26,-10,27, 
  /* [13][2][][] */ -60,70,-28,65,4,-19,-36,-29, -51,20,-56,14,-45,-28,14,26, -56,-25,24,-70,6,35,1,49, 
  /* [14][0][][] */ 91,-20,105,-28,24,104,11,-33, -18,32,26,2,8,26,40,-9, 34,-30,2,25,8,-25,23,-13, 
  /* [14][1][][] */ 127,-38,28,-40,-18,82,1,-61, 15,41,4,-13,13,-6,52,-10, -18,9,-11,-17,-14,-2,9,15, 
  /* [14][2][][] */ 84,20,71,-30,15,106,-30,-62, -31,4,-24,-11,50,-37,3,-18, 3,38,-8,-9,-12,6,1,26, 
  /* [15][0][][] */ 22,-6,-64,-74,-9,-64,-66,-3, -61,-61,88,-36,-12,-44,-73,56, -29,-87,11,-81,-123,-41,46,72, 
  /* [15][1][][] */ 65,-63,12,-86,-3,93,-55,68, 2,-86,105,-39,-83,123,14,107, 30,-65,-1,-38,-19,53,-48,-53, 
  /* [15][2][][] */ 1,-14,8,-82,-35,-49,-22,127, 55,-66,41,-18,-83,-41,-99,-38, 71,-2,21,-31,-80,-9,-54,64, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant16_scale = { 16, { 0.0024663691874593496, 0.0027973835822194815, 0.0028591172304004431, 0.0016884685028344393, 0.0029246148187667131, 0.0028524673543870449, 0.0030097372364252806, 0.0020142898429185152, 0.0027121126186102629, 0.0026058182120323181, 0.0023681262973695993, 0.0035899425856769085, 0.0047551468014717102, 0.0039182738400995731, 0.0036215886939316988, 0.0021083895117044449, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[16] = { -3045, -623, -2295, -1022, 2073, -3363, -1841, -3585, -2073, 1681, -2224, -624, 2062, 4265, -1212, -1877, };
const TfArray<1, int> tensor_dimension17 = { 1, { 16 } };
const TfArray<16, float> quant17_scale = { 16, { 5.1264978537801653e-05, 5.8145313232671469e-05, 5.9428482927614823e-05, 3.5095839848509058e-05, 6.0789890994783491e-05, 5.929026156081818e-05, 6.2559207435697317e-05, 4.1868235712172464e-05, 5.6372904509771615e-05, 5.4163509048521519e-05, 4.922293737763539e-05, 7.4619129009079188e-05, 9.8838609119411558e-05, 8.1443693488836288e-05, 7.5276911957189441e-05, 4.3824151362059638e-05, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension20 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension21 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension22 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[4] = { 0, 9, 0, 0, };
const TfArray<1, int> tensor_dimension24 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[4] = { 0, -22, 0, 0, };
const TfArray<1, int> tensor_dimension25 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension26 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,18,13,1 } };
const TfArray<1, float> quant27_scale = { 1, { 0.044129479676485062, } };
=======
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.016621781513094902, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[16*3*3*8] = { 
  /* [0][0][][] */ -2,13,54,64,-63,-30,-25,16, -28,-5,-34,-50,-101,-11,54,-115, -20,18,-20,3,-117,-82,20,-18, 
  /* [0][1][][] */ -37,25,62,65,25,-52,-34,-119, -83,-26,0,-24,-113,-30,54,-111, -60,52,55,19,57,55,-6,-102, 
  /* [0][2][][] */ -127,34,-122,-43,-74,28,43,-4, 37,12,-31,-71,-111,-7,-68,-100, 44,-7,0,-24,-30,-66,65,-11, 
  /* [1][0][][] */ -78,45,-28,27,-50,-112,-53,2, -88,-55,-77,-17,34,56,14,59, 42,-25,1,-115,-80,-93,-36,-27, 
  /* [1][1][][] */ -18,-2,23,-49,-127,-116,46,-80, -32,48,37,5,-60,13,3,-119, 41,-17,-64,-103,-51,46,-123,-27, 
  /* [1][2][][] */ -99,-73,49,-110,64,44,-28,-88, -73,-77,-36,-46,10,10,-9,-50, -108,-77,45,2,-10,-72,-109,-116, 
  /* [2][0][][] */ -18,66,-23,49,4,-36,3,10, 49,27,22,88,9,-68,-18,36, -89,35,18,-55,-57,4,33,-18, 
  /* [2][1][][] */ 61,71,-39,13,-72,24,80,25, -41,112,-31,-32,38,-13,-69,-84, -35,-88,56,6,18,13,-47,-61, 
  /* [2][2][][] */ 19,55,-25,53,-80,52,-97,-70, -74,106,48,127,34,25,29,6, -18,-57,-25,0,-104,-73,-94,-72, 
  /* [3][0][][] */ 72,-69,48,-53,88,-95,-12,74, 19,-68,-18,12,13,-95,-35,34, -11,-15,-17,-44,53,-94,62,55, 
  /* [3][1][][] */ 90,-50,52,-22,36,-127,-12,21, 1,-42,-60,-45,-34,-42,0,76, -35,-3,78,-3,-8,-103,66,72, 
  /* [3][2][][] */ 59,-25,67,-64,75,-105,43,16, -47,-49,-38,-46,-36,-108,-9,70, -21,-35,64,-80,56,-97,36,40, 
  /* [4][0][][] */ -48,-47,-70,-44,-91,-74,1,25, -44,24,-26,11,-8,47,20,-23, 9,117,35,12,-64,88,-27,6, 
  /* [4][1][][] */ -72,-58,-36,2,-4,34,40,-55, -24,119,1,41,-46,73,-49,-7, -21,26,0,74,42,6,31,-14, 
  /* [4][2][][] */ -47,-47,-47,9,-46,-51,-8,-93, -43,39,-26,40,-4,-17,-40,47, -12,127,-50,14,48,9,-76,41, 
  /* [5][0][][] */ -68,13,17,30,-39,-61,-57,4, -75,79,-29,27,24,81,-57,-38, -45,127,6,74,0,38,-64,4, 
  /* [5][1][][] */ -38,31,-14,-24,1,-12,-41,-79, -53,55,4,75,10,81,46,9, 31,90,-17,83,-36,63,19,-5, 
  /* [5][2][][] */ -16,-7,-42,15,-73,44,-38,-47, -27,72,-23,88,4,-18,-1,-54, 17,82,-43,84,-16,49,-49,-39, 
  /* [6][0][][] */ 49,-40,-2,24,-110,-58,-9,-22, 14,-106,13,-123,-63,-42,-4,27, -58,-127,-99,44,-55,-14,-98,-103, 
  /* [6][1][][] */ -89,-65,53,-62,-119,4,-99,-68, 70,-42,-112,-118,9,28,-11,-15, 4,65,54,-93,-24,-21,51,73, 
  /* [6][2][][] */ 36,-77,16,-103,-99,2,-89,-99, 70,-46,-91,-100,20,1,-62,60, -100,-56,40,57,-84,-92,-39,-73, 
  /* [7][0][][] */ -51,32,-39,-127,-107,48,36,-8, 10,42,29,53,23,24,8,11, -23,-33,-92,-46,40,-10,48,-13, 
  /* [7][1][][] */ -36,40,-33,-124,25,-77,11,7, -66,24,-14,42,-79,31,23,0, -104,-48,-46,-30,-51,-101,-87,39, 
  /* [7][2][][] */ -86,-114,-28,-13,-31,-89,-67,27, -77,-79,-23,13,36,-30,-100,-13, -70,-36,-14,-36,-98,-18,25,-3, 
  /* [8][0][][] */ 16,-112,38,21,-18,-59,30,12, -65,-88,-92,21,32,-61,-123,49, -52,-79,19,9,-29,10,-67,-43, 
  /* [8][1][][] */ -15,-126,51,-29,-46,-127,19,-74, -48,20,-37,-34,-20,24,-75,-7, -111,-105,-91,-19,-14,21,48,-2, 
  /* [8][2][][] */ -39,-108,36,-86,10,29,9,-48, 42,-83,44,-68,16,-96,-81,16, 27,9,-109,-16,-29,-96,28,-98, 
  /* [9][0][][] */ 1,-94,11,57,-77,47,31,44, -60,-80,-29,-107,-25,33,-69,22, -35,-103,-75,56,-73,-1,-79,50, 
  /* [9][1][][] */ -57,78,-108,-105,-104,67,-52,63, -65,-112,61,-123,-4,-27,-91,-61, -70,4,54,-19,-46,22,16,-112, 
  /* [9][2][][] */ -109,76,-83,-51,-24,-23,-94,-4, -24,-57,-1,-33,-105,-14,-127,64, -27,10,-92,-52,47,41,-94,-70, 
  /* [10][0][][] */ -88,-85,-71,5,-7,-66,38,-36, -117,-101,-51,-44,-72,-114,-99,-11, -83,-31,-73,12,-100,7,-58,49, 
  /* [10][1][][] */ -18,7,-32,74,-2,17,41,40, 53,-114,36,-58,-57,-117,59,34, 19,74,-120,-32,15,-8,-91,-70, 
  /* [10][2][][] */ 53,-28,-55,17,24,-113,48,-3, -127,39,50,-40,13,64,-115,-66, -97,-24,-68,-50,-60,-72,35,-120, 
  /* [11][0][][] */ -126,4,-77,60,32,-14,-83,-83, -71,-83,-2,-25,62,-121,-37,5, -53,-36,-97,30,-108,-98,-90,-50, 
  /* [11][1][][] */ 52,40,17,-87,24,-95,7,-117, -69,-18,-112,-9,-79,-80,-76,-78, -7,-79,-64,-36,-116,-48,6,-105, 
  /* [11][2][][] */ -71,-75,22,61,36,-54,-96,-59, -18,-29,3,-15,-60,-23,-127,-74, -60,-125,-78,66,-104,-28,22,12, 
  /* [12][0][][] */ -127,21,-80,77,-60,-30,38,-36, 11,-47,-104,-82,-118,23,-113,0, 54,53,64,-13,54,-109,-81,32, 
  /* [12][1][][] */ -120,-103,-53,-44,-16,21,-23,22, 37,-26,-61,-55,-2,-89,-38,-31, -16,22,58,-31,-6,-71,-20,54, 
  /* [12][2][][] */ -61,-121,-85,-113,-35,-25,-72,-16, -61,-82,-31,41,-32,-20,-35,-76, 78,-34,41,-26,25,-97,-42,-29, 
  /* [13][0][][] */ 14,-24,-24,-28,-100,27,-27,-22, -49,30,-69,0,-122,-41,-115,23, -1,43,116,-8,64,-69,-82,67, 
  /* [13][1][][] */ 24,21,-11,-49,9,-49,21,-15, -95,-51,-120,-107,-127,48,3,81, -44,-34,79,-44,17,-18,-26,44, 
  /* [13][2][][] */ 18,74,-63,126,-47,33,-28,-34, 1,-12,-38,-23,-33,-29,-64,-18, -68,49,6,-51,-42,18,-30,73, 
  /* [14][0][][] */ 23,5,50,-39,-52,43,-11,-100, -35,117,83,72,-8,-3,47,-69, 74,-98,-10,127,35,-97,-1,-96, 
  /* [14][1][][] */ 64,-46,-40,-42,-107,94,-22,-108, 64,125,23,73,59,9,93,11, -92,89,-61,-87,0,26,-102,29, 
  /* [14][2][][] */ -43,59,-4,-67,-51,100,-87,-113, -64,-65,-37,-32,104,-87,-17,-10, -14,101,-7,-45,-20,47,-22,41, 
  /* [15][0][][] */ 23,32,-37,-76,-35,-62,-83,31, -40,-49,14,-50,-20,-105,-33,6, -80,-91,33,-101,-126,-50,-19,20, 
  /* [15][1][][] */ 12,-67,-2,-78,-34,59,-44,13, -62,-101,14,-48,-110,53,-34,43, 25,-48,45,-110,24,4,-92,-62, 
  /* [15][2][][] */ -87,-51,-78,-105,-103,-127,49,64, -21,-37,38,64,-25,-109,-83,-51, 54,-26,53,-87,-114,-33,-96,39, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant16_scale = { 16, { 0.0016733949305489659, 0.0017269379459321499, 0.0019909536931663752, 0.0027086813934147358, 0.0023561352863907814, 0.0026690543163567781, 0.001671294798143208, 0.0018551959656178951, 0.0018409035401418805, 0.0015212985454127192, 0.0016464540967717767, 0.0017454411135986447, 0.0017453510081395507, 0.0024862030986696482, 0.0014925678260624409, 0.0016710576601326466, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[16] = { -2438, -2650, -1545, 3129, -1027, -2162, -2101, -2839, -2126, -980, -2241, -2057, 1629, 3724, -1686, -2503, };
const TfArray<1, int> tensor_dimension17 = { 1, { 16 } };
const TfArray<16, float> quant17_scale = { 16, { 2.7814805434900336e-05, 2.8704786018352024e-05, 3.3093197998823598e-05, 4.5023109123576432e-05, 3.9163165638456121e-05, 4.4364438508637249e-05, 2.7779897209256887e-05, 3.0836661608191207e-05, 3.0599097954109311e-05, 2.5286692107329145e-05, 2.7367001166567206e-05, 2.9012340746703558e-05, 2.9010843718424439e-05, 4.1325125494040549e-05, 2.4809136448311619e-05, 2.7775955459219404e-05, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data19[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension19 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension20 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension21 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,24,7,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,12,4,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[4] = { 0, 45, 0, 0, };
const TfArray<1, int> tensor_dimension24 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[4] = { 0, -96, 0, 0, };
const TfArray<1, int> tensor_dimension25 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension26 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,58,13,1 } };
const TfArray<1, float> quant27_scale = { 1, { 0.041862968355417252, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant27_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension28 = { 2, { 4,2 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension29 = { 4, { 1,19,13,1 } };
const TfArray<1, float> quant29_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant29_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,19,13,8 } };
const TfArray<1, float> quant30_scale = { 1, { 0.020785605534911156, } };
=======
const TfArray<4, int> tensor_dimension29 = { 4, { 1,59,13,1 } };
const TfArray<1, float> quant29_scale = { 1, { 0.041862968355417252, } };
const TfArray<1, int> quant29_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,59,13,8 } };
const TfArray<1, float> quant30_scale = { 1, { 0.016621781513094902, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data31[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension31 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension32 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data33[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension33 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension34 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant34_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant35_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<4, int> tensor_dimension36 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant36_scale = { 1, { 0.030032997950911522, } };
=======
const TfArray<4, int> tensor_dimension34 = { 4, { 1,57,13,8 } };
const TfArray<1, float> quant34_scale = { 1, { 0.016621781513094902, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,29,7,8 } };
const TfArray<1, float> quant35_scale = { 1, { 0.016621781513094902, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<4, int> tensor_dimension36 = { 4, { 1,29,7,16 } };
const TfArray<1, float> quant36_scale = { 1, { 0.019578747451305389, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data37[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension37 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension38 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data39[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension39 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension40 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant40_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<4, int> tensor_dimension41 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant41_scale = { 1, { 0.030032997950911522, } };
=======
const TfArray<4, int> tensor_dimension40 = { 4, { 1,27,7,16 } };
const TfArray<1, float> quant40_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<4, int> tensor_dimension41 = { 4, { 1,14,4,16 } };
const TfArray<1, float> quant41_scale = { 1, { 0.019578747451305389, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant41_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension42 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data43[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension43 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data44[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension44 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension45 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data46[4] = { 0, 21, 0, 0, };
const TfArray<1, int> tensor_dimension46 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data47[4] = { 0, -10, 0, 0, };
const TfArray<1, int> tensor_dimension47 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data48[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension48 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,18,13,1 } };
const TfArray<1, float> quant49_scale = { 1, { 0.044129479676485062, } };
=======
const TfArray<4, int> tensor_dimension45 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data46[4] = { 0, 97, 0, 0, };
const TfArray<1, int> tensor_dimension46 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data47[4] = { 0, -48, 0, 0, };
const TfArray<1, int> tensor_dimension47 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data48[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension48 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,54,13,1 } };
const TfArray<1, float> quant49_scale = { 1, { 0.041862968355417252, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant49_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data50[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension50 = { 2, { 4,2 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension51 = { 4, { 1,19,13,1 } };
const TfArray<1, float> quant51_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant51_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,19,13,8 } };
const TfArray<1, float> quant52_scale = { 1, { 0.020785605534911156, } };
=======
const TfArray<4, int> tensor_dimension51 = { 4, { 1,55,13,1 } };
const TfArray<1, float> quant51_scale = { 1, { 0.041862968355417252, } };
const TfArray<1, int> quant51_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,55,13,8 } };
const TfArray<1, float> quant52_scale = { 1, { 0.016621781513094902, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data53[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension53 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data54[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension54 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data55[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension55 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension56 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant56_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant57_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.030032997950911522, } };
=======
const TfArray<4, int> tensor_dimension56 = { 4, { 1,53,13,8 } };
const TfArray<1, float> quant56_scale = { 1, { 0.016621781513094902, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,27,7,8 } };
const TfArray<1, float> quant57_scale = { 1, { 0.016621781513094902, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,27,7,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.019578747451305389, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data59[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension59 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data60[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension60 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data61[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension61 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension62 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant63_scale = { 1, { 0.030032997950911522, } };
=======
const TfArray<4, int> tensor_dimension62 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant63_scale = { 1, { 0.019578747451305389, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data64[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension64 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data65[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension65 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data66[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension66 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension67 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant67_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data68[4] = { 0, 33, 0, 0, };
=======
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,4,16 } };
const TfArray<1, float> quant67_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data68[4] = { 0, 145, 0, 0, };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> tensor_dimension68 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data69[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension69 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data70[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension70 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension71 = { 4, { 1,16,13,1 } };
const TfArray<1, float> quant71_scale = { 1, { 0.044129479676485062, } };
=======
const TfArray<4, int> tensor_dimension71 = { 4, { 1,54,13,1 } };
const TfArray<1, float> quant71_scale = { 1, { 0.041862968355417252, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant71_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data72[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension72 = { 2, { 4,2 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension73 = { 4, { 1,17,13,1 } };
const TfArray<1, float> quant73_scale = { 1, { 0.044129479676485062, } };
const TfArray<1, int> quant73_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,17,13,8 } };
const TfArray<1, float> quant74_scale = { 1, { 0.020785605534911156, } };
=======
const TfArray<4, int> tensor_dimension73 = { 4, { 1,55,13,1 } };
const TfArray<1, float> quant73_scale = { 1, { 0.041862968355417252, } };
const TfArray<1, int> quant73_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,55,13,8 } };
const TfArray<1, float> quant74_scale = { 1, { 0.016621781513094902, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data75[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension75 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data76[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension76 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data77[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension77 = { 1, { 4 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension78 = { 4, { 1,15,13,8 } };
const TfArray<1, float> quant78_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,8,7,8 } };
const TfArray<1, float> quant79_scale = { 1, { 0.020785605534911156, } };
=======
const TfArray<4, int> tensor_dimension78 = { 4, { 1,53,13,8 } };
const TfArray<1, float> quant78_scale = { 1, { 0.016621781513094902, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,27,7,8 } };
const TfArray<1, float> quant79_scale = { 1, { 0.016621781513094902, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data80[4*2] = { 
  0, 0, 
  0, 1, 
  0, 0, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension80 = { 2, { 4,2 } };
<<<<<<< HEAD
const TfArray<4, int> tensor_dimension81 = { 4, { 1,9,7,8 } };
const TfArray<1, float> quant81_scale = { 1, { 0.020785605534911156, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,9,7,16 } };
const TfArray<1, float> quant82_scale = { 1, { 0.030032997950911522, } };
=======
const TfArray<4, int> tensor_dimension81 = { 4, { 1,28,7,8 } };
const TfArray<1, float> quant81_scale = { 1, { 0.016621781513094902, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,28,7,16 } };
const TfArray<1, float> quant82_scale = { 1, { 0.019578747451305389, } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data83[4] = { 0, 1, 0, 0, };
const TfArray<1, int> tensor_dimension83 = { 1, { 4 } };
<<<<<<< HEAD
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data84[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension84 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data85[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension85 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant86_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant87_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant88_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data89[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension89 = { 1, { 2 } };
const TfArray<2, int> tensor_dimension90 = { 2, { 1,832 } };
const TfArray<1, float> quant90_scale = { 1, { 0.030032997950911522, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data91[3*832] = { 
  26, 19, 53, -17, 0, 28, 4, 11, -8, -29, 20, 49, -6, -13, 26, 0, 8, -9, -4, 18, 14, -18, 8, 2, -18, 16, 36, 6, 17, 33, 18, -10, -14, 1, 1, 7, 42, -16, -34, 23, -15, 27, 30, 47, 39, 36, -4, 7, 0, 7, -14, -6, 58, -18, 19, 9, -7, 39, -8, 8, 51, 28, -25, 19, 13, 12, 41, 11, 4, 44, 14, 11, -16, -33, 17, 49, -19, -13, 34, -39, -2, -13, 19, 3, 25, -24, -6, 3, -4, 36, 19, 22, 53, 65, -18, 9, -19, -8, -1, 19, 21, 3, -30, 3, 7, 6, -8, 21, 23, 69, -14, 9, 10, -2, -16, -13, 44, -6, 6, -10, 21, 34, -35, -24, -1, 4, -7, -11, 21, 5, 27, 9, -17, 32, 14, 20, 10, -70, 60, 102, -40, -30, 37, -35, 7, 14, -7, 6, 8, -21, -13, -19, -25, 13, 23, 36, 16, 18, -8, -4, 4, -19, -37, 27, 40, -13, -9, -13, -7, 31, -14, 26, 33, 27, -19, 23, -7, 2, -10, 8, 37, -37, -1, -18, -16, 37, -26, -26, -6, -4, 9, 11, 24, 36, 27, 6, -11, 30, 26, 40, -3, -26, 51, 38, -37, -62, 32, -20, -9, -34, -8, 14, 32, -24, -44, -12, -15, -21, 11, 51, 4, 19, 15, -2, -31, -14, 4, 10, 13, -9, -18, -4, -23, 34, 0, 10, 41, 50, -30, 9, -2, 1, -46, -13, 41, -26, -23, -5, -15, 25, -7, 6, 22, 55, -29, -1, 2, -14, 57, 14, -14, 32, -4, 35, -8, -21, 42, 87, -36, -58, 33, -44, 7, -20, 8, -5, -34, -27, -28, -20, -22, -35, 56, 19, 3, 14, -25, -7, -31, -15, -14, -19, -9, -16, -20, -9, -20, -2, 3, -26, 31, 34, -29, 14, -19, -8, -9, 0, 28, 0, -18, 0, -18, 2, -16, -35, -4, -10, -17, -16, 36, -12, 54, -11, -20, 47, 0, 42, 10, -39, 27, 61, -27, -64, 49, -16, -2, 12, -13, 12, -21, -16, -8, -1, 4, -47, 28, 63, 6, 20, 2, -28, -26, -12, -7, -15, 22, -17, -11, -8, -17, -25, -22, 1, 9, 9, -26, 4, -43, -9, -9, -3, 28, -1, -34, -13, -6, 11, -21, 6, 6, 11, -47, -44, 2, 6, 38, -3, -25, 25, 16, 14, -3, -38, 39, 59, -35, -86, 44, -2, 14, 6, -23, -13, -20, -26, -32, -4, -16, -42, 37, 15, 31, 9, 18, -6, -1, -7, -6, -6, -30, 3, 0, -4, -23, 15, 9, -47, 22, 11, 0, 12, -19, -12, -28, -17, -16, -9, -14, -11, -3, 4, -17, -8, -33, 1, -47, -30, 21, 5, 41, -2, -12, 17, -6, 13, -3, -22, 14, 35, -41, -69, 36, -15, 10, 0, 17, -3, 1, -9, -23, -15, -20, -52, 31, -4, 27, 14, 30, -14, -4, 15, -16, 1, -17, -31, -19, -7, -29, 15, -18, 7, 9, 11, -23, 14, -37, -41, -49, 6, -24, -31, 12, -8, -13, -6, -15, -16, 7, 0, -24, -12, 11, 18, 34, -3, -27, 55, 11, 30, -5, -35, 43, 67, -28, -27, 51, -19, 6, 3, -16, -1, 21, -24, -24, -2, -33, -18, 1, 8, -6, 30, 12, 3, -19, -12, -15, 25, 4, -3, -19, 2, -10, 28, -21, -25, -16, 21, -12, 13, -44, -7, -29, 16, 27, -13, -17, -8, -4, 6, -45, -19, -58, 14, -44, -16, 18, -7, 30, 3, -16, 43, -9, 37, 15, -42, 40, 60, -14, -59, 24, -9, -5, 9, 4, -14, 25, -13, -47, -23, 22, -5, 28, 18, 16, 35, -16, 1, 2, -1, -22, 10, 33, -16, 7, -17, -6, 16, -2, -19, 25, 25, -37, 18, -25, -2, -21, -9, 45, -29, 3, -1, -22, 56, -27, -47, 53, 5, -15, 15, 25, 31, 43, -5, -18, 48, -12, 30, 2, -46, 30, 73, -62, -59, 25, -17, 24, 9, 7, -10, 29, -19, -36, -15, -11, -22, 20, 36, -2, 37, 11, 7, 7, 7, -6, 15, 46, -35, -6, -21, -16, 34, -6, 2, 40, 23, -11, 1, -43, -30, -27, 28, 13, -20, -3, -10, -13, 36, -18, -49, -27, -6, -46, 0, -7, 5, 50, -16, -17, 33, 15, 29, -8, -23, 34, 32, -51, -34, 36, -38, 11, -24, -10, -17, 16, -9, -27, 13, -1, 10, 23, 1, 14, 17, -6, -4, 1, -4, -5, -18, 22, -18, -5, -12, 2, 50, -1, -7, -6, 31, -12, 3, -10, 2, -4, 2, 9, -5, 11, 8, -4, 65, -19, -31, -36, 21, -10, 32, -33, -10, 14, 11, -72, 13, -24, 2, -3, -39, 9, 61, -12, -13, 20, -29, -3, -6, -2, 5, 16, 11, -28, 9, 7, 3, -3, 24, 19, 33, -24, 16, 1, 7, -28, 7, 34, 30, -18, -5, 30, 42, 28, -73, 4, 50, -38, 47, 3, -8, -11, 8, 49, 44, -13, 46, -9, 30, 41, -8, -44, 37, 1, 51, 
  8, 16, -20, -7, -42, -12, 36, -8, 35, 34, -4, -51, -18, -23, 20, 31, 0, 1, 0, 5, 3, 10, -5, -12, -8, 17, 2, 12, -3, 7, 10, -16, 25, -2, -10, -31, 46, -13, 6, 14, 20, 23, -11, -7, -21, -27, -10, 18, -2, 22, -19, 1, -23, 10, 8, 10, 17, -3, 4, -25, -21, 18, 6, 25, 32, 62, -28, -5, -25, -23, 28, 23, 54, 27, -21, -44, -36, -29, 24, -1, -42, 10, 8, -3, 29, -18, -22, -2, 6, 11, -23, -5, -40, 28, 12, -15, -11, -9, -14, 9, 0, -1, 29, -7, 34, 20, -16, -48, -13, -12, 3, 24, -10, 1, 2, 6, -35, 16, 26, 14, 50, -4, -6, -17, 20, 13, 3, 6, 25, 25, -52, -6, -26, -44, 38, -20, 30, 20, -19, -115, -12, -32, 43, 29, -8, 52, 12, 7, 18, 8, 10, -20, 24, 14, -2, -19, 2, 8, -6, 33, -1, 8, 3, 3, -15, 12, 57, -8, 29, 9, -24, -26, -12, -5, 4, 22, 8, -2, 19, 24, -18, 20, 27, 17, 35, 22, 10, -17, -37, 22, 5, 26, 26, 23, -33, -5, -15, -35, 20, 18, 44, 28, -29, -56, 1, -22, 48, 24, 22, -10, 3, 3, 0, 0, 4, -6, 21, 29, -25, 27, 0, 4, 7, 19, 0, 47, -9, 28, -4, -4, 54, 2, 49, 39, 7, 18, -29, -4, 12, -5, 4, 10, -3, 37, -31, -1, 20, 2, -1, -13, 13, 18, -10, -30, -13, 9, 24, 19, -50, -15, -40, -54, 35, -4, 25, 46, -48, -88, -27, -40, 34, 24, -13, 18, -21, -4, 6, -18, -13, -24, 16, 26, -31, 10, -13, -3, 2, -3, -5, 26, 7, -8, 12, -30, 34, 16, 18, 11, -3, -13, 9, -3, -4, 24, 10, -21, -21, -27, -9, -16, 29, 2, 19, 21, -10, 15, -21, 17, -16, 29, -8, 10, -57, 26, -4, -23, 10, -28, 8, 38, -62, -61, -30, -38, 9, 12, 1, -31, -4, -9, -19, -16, -22, 9, -15, -4, -5, -15, -19, -18, -9, -3, -7, -21, -12, 11, 30, 5, 24, 17, 17, 35, -15, -20, 35, -13, -4, 40, -4, -9, 24, 23, -20, 4, 28, -5, 38, 11, -26, -9, -76, 1, 36, 28, -2, 12, -43, -4, -22, -13, 16, -36, 10, 24, -42, -127, 8, -37, 49, 1, -22, -21, 10, -3, 26, -13, -22, 15, 9, 11, -16, -12, -65, 3, 9, 1, -25, -24, -13, -3, 17, -6, 9, 18, 7, 39, 7, -29, 14, 6, 1, -6, 28, 15, -4, -1, 25, -22, 21, 26, 19, -10, -17, 1, 40, -9, 6, 0, -9, 34, -47, 11, -31, -17, 34, -22, 19, 34, -30, -75, -14, -17, 29, 16, 12, 21, 15, 12, 28, 12, 15, -3, 11, 7, -3, -22, -24, -6, 8, 27, -15, -26, 4, -18, -11, -6, 24, 11, -3, 22, -11, -5, 23, 28, 9, -21, 7, 9, -11, -15, 63, 6, -2, -4, -6, 14, -4, 14, 11, 6, 32, 27, 23, 9, -37, 7, -19, -7, 12, 1, 21, 33, -32, -125, -6, -9, 15, 12, -7, -40, -6, 3, 12, -11, 24, 18, -4, 21, 8, -4, 12, 2, 22, 21, 4, 6, -16, -30, 20, -12, 20, 8, 3, 40, -23, -23, 9, 16, -11, 45, 4, 62, 0, -17, -12, -9, 51, -8, 9, 41, -12, -4, 42, -9, -2, 18, -9, 18, -29, -3, -17, -23, 38, -11, 41, 0, -56, -98, -8, -13, 38, 19, -16, 6, 6, -6, -13, -11, -19, -7, -11, 35, -4, -5, -39, -2, 3, 46, -7, -7, 2, 3, 13, -8, 16, -13, -1, 25, -14, -5, -10, -8, -29, 19, 13, 9, -17, 12, 9, -5, 31, -1, 25, -15, 1, 6, -66, 31, 10, -1, 7, -47, -14, -7, -15, -26, 43, -30, 46, 35, -24, -79, 9, -27, 27, 11, -7, -17, 12, 12, 12, -3, -4, 5, -6, 43, 3, 2, 8, -8, -1, 45, -26, 35, -2, -6, 19, 8, 26, 20, 5, 13, -16, -15, 20, -19, -5, 16, 26, 5, 29, -15, -7, -3, -22, -7, -2, -20, 6, -4, 7, 21, 23, -17, 41, 37, 0, 14, -2, -8, 26, -1, 62, 41, -27, -51, -44, -26, 24, 28, -16, 21, -1, 25, 2, -13, 33, 0, 25, -22, 10, 28, -20, -12, 29, 20, -11, -20, -2, -12, 24, -11, 18, 23, 12, 10, -12, -32, 18, 17, 1, -6, -2, 22, -7, -4, -11, -16, -20, -12, 16, -18, 7, 12, 18, 0, 31, -10, 55, 10, 12, -30, 15, 35, 58, 13, 20, 34, -24, -40, -13, -29, 18, 69, 21, -15, 8, -2, 31, 23, -9, 6, 34, 28, 40, 2, -32, -13, 2, -6, -12, 14, -3, -4, -2, -4, 20, -17, -16, -4, 4, 0, 22, -3, -29, -13, 24, -2, -3, 1, -36, -21, -2, -33, 25, -18, -4, 5, 7, -2, 11, -10, 
  -27, -19, 4, -1, -3, -21, -34, -37, -12, -5, 13, -16, 15, 36, -45, -5, -1, -8, -4, 12, -5, 21, 24, -12, -8, -17, 1, 8, -26, -61, -1, -1, -12, 5, 1, 3, -59, 4, 1, -4, -6, -78, -21, -7, -14, -32, 15, -39, 3, -35, 10, -17, -27, -18, -42, -8, -2, -55, 10, -6, -25, -53, -20, -52, -6, -11, -4, 11, 21, -16, -24, -23, -53, -2, -27, 28, 51, 67, -63, 4, 4, -10, 8, -20, -40, 18, 8, 9, 2, 1, -38, -8, -3, -43, 6, 5, -7, 0, 29, 4, -42, 16, -20, 8, -11, -60, -16, 32, -27, -67, 0, 5, -22, -5, 39, -20, 0, 17, -8, 7, -47, -40, 24, -11, -41, -21, -16, -44, -28, -17, -12, 4, 45, -17, -40, -24, -59, -4, -47, 58, 64, 40, -55, -19, -19, -38, 18, 15, -22, 7, 34, -5, -21, -2, -18, -26, -33, -47, 6, -26, 21, 13, 11, 0, -21, 4, -31, 4, -17, -51, 14, 30, 1, -45, 7, -21, 10, -26, 11, -7, -21, 0, -10, 6, -24, -47, 17, 27, 38, -6, 1, -13, -11, -42, 0, -2, 62, 6, -21, -1, -38, -5, -4, 33, 25, 56, -61, -14, -15, 3, 2, -9, -21, 13, 15, -6, 5, -4, -5, -56, 13, -9, -18, -5, -7, -16, 18, -20, -21, 12, -37, -21, 11, -66, 19, 8, -9, -25, -5, -6, -5, 27, 14, -7, 10, 13, 5, 8, 17, -15, 20, 17, 18, -22, 6, -23, -20, -7, -3, 11, 32, 3, -42, -4, -28, -5, -5, 27, 32, 42, -56, -9, -4, 8, 15, -8, 13, 20, 23, -8, -11, -3, -24, -44, 1, -14, -4, 9, 9, -3, 3, -5, -47, 11, -28, 14, -1, -52, 11, -6, -48, -25, 9, -10, 9, 15, 9, 22, -39, 25, -14, 14, 14, -18, 2, -2, 2, -16, 20, 5, -13, 15, -9, -6, 29, -20, -18, 13, -9, 3, 14, -30, 51, 55, -50, 25, 2, 7, 13, -6, 21, 17, 31, 27, 5, 18, -14, -28, 20, -10, 34, 31, 21, 40, 43, -10, -8, 30, 4, -10, -16, -42, 29, 7, -18, 12, 14, -27, 24, 28, 17, -15, -1, 16, -26, 19, -6, -9, 16, 29, 22, 17, -2, 18, -29, -7, -8, 9, 19, -46, -38, -24, -22, 6, -4, 51, 37, 44, -54, 9, -17, 11, -6, 10, 25, -1, 22, -5, 11, 50, -33, -34, 27, 24, 3, 25, 21, 27, 7, 19, -14, 19, 1, -3, -10, -40, 28, 30, -50, -37, 6, -23, 3, 20, 36, -9, 28, 17, -23, 21, -10, 3, 5, -10, -14, -1, -3, -1, -39, -19, 4, 11, 32, -18, -41, -17, -22, -12, 0, 6, 47, 67, -44, 14, 13, -29, 1, -15, -5, 7, 8, -3, 12, 41, -19, -12, -6, 21, 12, 24, 34, 17, 22, 9, 12, 3, 6, -6, -7, -40, 18, 5, -27, -22, 15, 25, 4, -13, 8, -4, -34, 18, -6, 16, -4, -17, 37, 1, -12, -11, 9, -22, -40, 21, 13, -13, 42, 2, -49, -20, -43, -1, 23, 41, 28, 47, -51, 6, 16, 7, -8, 17, -20, 9, 15, 19, 13, -25, -32, -15, 9, -25, 22, -24, 3, -7, 8, 11, -25, 18, -23, -1, -3, -30, 26, 31, -13, -36, -9, -18, 12, -13, 41, -19, 0, 31, -18, 24, -2, -16, 14, 21, -2, 11, -1, 1, -2, -44, -8, 4, 35, -9, -32, -7, -37, -2, -13, 16, 54, 49, -52, 19, 1, -18, -7, -7, -38, 25, 16, -4, 20, -19, -21, -29, -11, -15, 2, -16, 6, -9, 38, -4, -47, 30, -11, 15, -14, -42, 18, 38, -39, -15, 4, -14, -2, -4, 10, 4, -26, 26, -17, 22, -36, -30, 27, 6, -6, -36, 8, 0, -32, -10, -16, 7, 28, -9, -47, 3, -36, 15, -4, 0, 45, 38, -65, 2, 1, 18, 1, -2, -27, 21, 15, 5, -2, 0, -22, -38, -16, -53, -8, -24, -3, -13, 13, -9, -38, -7, -15, -6, -19, -45, 17, 7, -42, -40, 20, -2, -12, 1, 17, -26, -35, 0, 10, -4, -10, -26, 2, 17, 7, -32, 8, -10, -36, -25, -3, -4, 36, -10, -41, -9, -22, -6, -11, 2, 46, 23, -33, 2, -6, 6, -22, -13, 15, 14, -5, 1, 1, -14, -57, -25, 21, -18, -7, -32, 8, 16, 21, -22, -37, 5, -13, 0, -3, -48, -2, 1, -68, -34, 19, -27, 0, 16, 19, -11, 33, 3, -8, 3, 6, -31, 18, 20, -24, -49, 10, 17, -20, -12, -10, -7, 24, -7, -20, -29, -12, -8, 41, -50, 34, 12, -57, -16, -15, 8, -15, -10, -40, -3, 40, -11, -13, -10, -54, -40, -7, -41, -6, -26, -2, 23, 2, 9, -52, -24, -32, -10, 3, -44, -30, 47, -55, -47, 34, -20, -7, 19, -10, -20, -31, -16, 19, -12, 26, -6, -5, -19, 6, -51, -19, -23, 
};
const TfArray<2, int> tensor_dimension91 = { 2, { 3,832 } };
const TfArray<1, float> quant91_scale = { 1, { 0.0043556615710258484, } };
const TfArray<1, int> quant91_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data92[3] = { 21, 464, -345, };
const TfArray<1, int> tensor_dimension92 = { 1, { 3 } };
const TfArray<1, float> quant92_scale = { 1, { 0.00013081356883049011, } };
const TfArray<1, int> quant92_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<2, int> tensor_dimension93 = { 2, { 1,3 } };
const TfArray<1, float> quant93_scale = { 1, { 0.2068178802728653, } };
const TfArray<1, int> quant93_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
=======
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data84[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension84 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data85[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension85 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,27,7,16 } };
const TfArray<1, float> quant86_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,14,4,16 } };
const TfArray<1, float> quant87_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data88[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension88 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data89[4] = { 0, -1, 0, 0, };
const TfArray<1, int> tensor_dimension89 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data90[4] = { 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension90 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension91 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant91_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant91_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<4, int> tensor_dimension92 = { 4, { 1,50,4,16 } };
const TfArray<1, float> quant92_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant92_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data93[2] = { -1, 3200, };
const TfArray<1, int> tensor_dimension93 = { 1, { 2 } };
const TfArray<2, int> tensor_dimension94 = { 2, { 1,3200 } };
const TfArray<1, float> quant94_scale = { 1, { 0.019578747451305389, } };
const TfArray<1, int> quant94_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data95[3*3200] = { 
  13, 20, 34, -59, 23, 24, 18, -10, -11, 29, 9, -9, 3, -47, 40, 20, 7, -27, 4, 24, -8, -22, 31, -3, -5, -26, 44, -2, -23, 6, 8, -26, 7, -5, -22, -3, 31, -50, -16, 18, -15, 6, 20, 30, 34, 26, 16, -12, 6, 16, -28, 14, 16, -41, 17, -2, 9, 5, 14, -21, 15, -26, 15, -8, 10, 13, -12, -39, -13, 36, -3, -6, -19, 1, -19, 1, -38, -16, 22, 16, -4, -30, 26, 25, 7, -37, 8, 0, -18, 21, -3, 12, 21, 29, 6, 7, -20, -3, 6, 44, -6, -15, -8, 8, 4, -1, 10, -21, 20, 57, -2, 14, 8, 17, -19, 24, -13, -5, -25, 4, 35, 26, 5, -20, -10, 17, 26, 2, 17, -5, 6, -20, 50, 19, 1, 6, 16, -33, 26, -19, -29, -29, 22, -15, -7, 9, -9, 19, 18, -36, 15, -13, -17, -18, 16, 8, 25, 7, 22, 12, 14, -10, -14, 20, -8, -7, 9, -5, 2, 9, 5, 11, 39, 41, 16, 11, -28, -6, 5, 48, 20, -20, -19, -8, 24, 36, -13, 10, -48, -13, 32, -15, 19, 24, 13, -53, 45, 45, -5, 33, 4, 14, 22, -12, 7, -45, 28, 9, -7, -20, 3, 19, 9, -33, -27, 6, 22, 2, 14, -13, -2, -5, -7, 9, -22, 12, 12, 15, 4, -28, 18, -1, 9, 14, -6, 6, -4, 42, -33, 12, -12, 11, -33, 19, 19, -13, -28, 17, 18, -4, -25, 6, 14, 28, 8, -9, 4, -16, 43, -7, -6, 23, 5, 14, -29, 24, 3, -9, -8, -35, 14, 19, -12, -1, -2, 9, -13, -51, 16, -17, -29, -20, -12, 2, 22, 26, -23, 24, -23, 5, 11, -4, -21, -80, 8, 9, 11, -10, -7, -8, -2, 45, 21, 8, -16, -18, -7, 82, -9, 19, -24, 12, -4, 26, -28, -21, -32, -8, -6, -10, 24, -9, 35, -54, 52, 62, -11, 35, 9, -37, -8, -43, 4, -24, 38, -14, -23, 5, -18, -4, -15, -20, 10, 7, 10, -5, -12, 38, 18, 13, 10, -9, -22, -12, -23, -20, 21, -57, -5, 9, -11, -3, -2, 27, 25, -4, -18, 20, -23, -2, -2, 39, -6, 12, -13, -4, 4, 26, -35, 2, -13, 5, -11, -19, -6, 1, 28, -42, 1, 35, -20, 2, -2, -3, -30, 8, -27, -33, 15, 23, 9, -8, -22, -28, -6, -39, -16, 9, 5, 3, -10, 1, 5, 8, -3, -1, 6, -6, 2, -2, -15, -27, 12, 3, -33, 11, 13, 9, 12, 17, 9, 23, -9, -23, -49, 8, 8, -40, -10, -3, 28, 14, -31, -29, -32, -35, -19, -17, -9, -2, 21, -45, 43, 46, 5, 0, -25, 28, 19, 19, -14, -4, 25, 11, 15, -17, 13, -15, 0, -17, 8, -8, -16, 12, 24, 10, 12, 17, 24, 12, 6, 15, -13, 9, -29, -57, -8, -19, -30, -15, 6, 24, 4, 35, -30, -5, -26, -16, -40, 12, -1, -37, 23, 4, -10, -8, -4, -18, 11, 7, 4, -12, -22, 9, 22, -56, 55, 42, -3, 24, -5, -30, 6, 24, 10, -52, 23, -6, 1, 4, 3, -10, 2, -38, 15, 7, -14, -10, -10, 10, -2, 18, 2, 1, -25, -8, -1, 17, -20, -25, -15, -8, -25, 6, -27, 15, -9, 22, -5, -4, -35, 5, -43, -1, 31, -19, 17, 7, 9, -19, -25, -36, -12, -3, -17, 11, -2, -21, -13, -32, 18, 57, 2, 31, 16, 11, 8, 23, 10, -49, 10, -4, -10, 4, 25, -11, -41, -10, -16, -27, 17, -7, 8, 8, -14, -5, -13, 10, 8, -2, -17, 32, -2, -38, 11, -48, 0, 13, -3, 12, -12, 48, -41, 8, 12, 6, -41, 17, -9, -25, 34, 3, -15, 12, -28, -21, -10, -56, 4, -11, -3, -9, -8, -90, 48, 57, -28, 9, 7, -10, -14, 17, -31, -67, -2, -13, -4, -3, -17, -26, -4, -32, -7, -18, -18, -24, 6, -13, -21, 10, -3, -3, 8, 20, -18, 22, 5, -39, 4, -17, -13, -15, 24, -36, 32, 10, -7, 1, -23, -31, -17, 67, -14, -26, -12, -21, 3, 3, -13, -33, -32, -33, -24, -26, 7, 6, 33, -58, 14, 43, -18, -19, 8, -16, 20, 4, -29, -47, 5, -26, -22, -11, 3, -11, -5, -38, -28, 18, 7, -20, -14, -17, -4, -16, 13, -24, -11, -38, 6, -14, 6, -50, -19, -18, 22, 20, 13, 16, 1, 18, -3, -28, -34, 6, -38, 3, 13, -22, -3, -3, 10, -1, -50, -12, -23, -14, 3, -8, 0, -12, 9, -42, 3, 65, 1, -7, -15, 1, -27, 7, -38, -38, 0, 2, 20, -6, 9, 4, -18, -16, -24, -5, 3, -16, 18, -14, -22, 6, -10, -15, -4, 11, -15, 22, -30, -34, -17, -14, 17, 30, 15, 15, 13, 48, -23, 23, -2, -15, -38, 39, -2, 4, 8, 1, 36, -27, 8, -14, -35, -33, 17, -9, -7, 20, 4, -57, 11, 23, 9, 12, -1, -23, 29, -34, -30, -41, 44, 19, 18, 2, 1, -26, -27, -52, -6, -26, 8, 13, -18, -30, -13, 15, -24, -15, 10, 7, -32, 19, 3, -26, -4, 21, -10, 14, -23, 7, 21, 16, -2, 1, -14, -15, -27, 31, -20, -17, 6, -6, -14, 37, 1, -22, -22, 11, -13, 10, -29, 16, -20, -102, 1, 41, -35, 26, 4, -8, -6, 4, -47, -7, 10, -5, -23, 0, -6, 3, -26, -20, -2, -16, 14, -9, 48, -11, 1, 25, -24, -16, 5, -12, -24, 24, -22, -35, 21, 17, -32, 28, -5, 19, 36, 47, -3, 25, 5, -29, -53, -7, -33, 15, -9, -13, -6, 0, -12, 7, -32, -10, 5, 14, 10, 17, 26, -47, 1, 43, -2, 0, 13, -2, -14, -3, -1, -53, 19, -2, 11, -4, 28, 26, -46, -41, -31, 17, -22, -22, 14, 1, 3, 44, -1, -18, -6, -1, -13, 24, -30, -28, -20, 11, 13, 3, 12, 16, 9, 59, -21, -12, -18, -23, -51, 33, 12, -42, -20, -7, 14, 30, -17, -22, -1, 29, -26, 8, 36, 1, 11, -58, 33, 67, -26, 10, 19, -19, 7, -10, -13, -30, 1, 7, -25, -13, -7, -17, 3, -25, -22, -13, -4, -5, 7, -13, -29, 1, -5, -23, -1, 20, 11, 5, -26, -28, 0, -31, -6, -6, 14, -48, 16, 22, 6, 23, -24, -21, -30, 14, 9, 6, 31, -20, 2, 24, -21, -33, -22, 19, 19, -16, 25, 0, 13, -31, 52, 60, -13, 28, 22, 4, 21, 26, -15, -48, 10, -19, -25, 23, 1, 31, -36, -40, -18, -24, -10, 19, -2, -20, 0, 18, -31, -25, -28, -14, 7, 6, 21, -57, -11, 0, -6, 37, -19, -8, -12, 30, -3, 10, -15, -9, -36, 29, -20, -4, 19, -29, 24, 22, -1, 20, -39, 5, -12, 18, 6, 25, -3, -32, 56, 32, -29, -7, 37, -19, -20, -6, -18, -6, 32, 8, 4, 20, 20, -3, -27, -32, -13, -15, -5, 1, 6, -16, 15, 64, -2, -15, 10, -13, -25, 19, -29, -69, -12, -30, 11, 29, 5, 4, 44, 61, 14, 14, -20, -18, -19, 25, 26, -23, 21, -28, 30, 28, -34, 10, -41, 25, -14, 2, 22, -8, 7, -78, 43, 65, 23, 20, -9, -12, 15, 51, 0, -30, 39, -17, -7, 17, 0, -10, 0, -36, -3, -6, 2, -4, -2, 2, -8, 51, -29, 7, 1, -14, 0, -17, 2, -40, 29, -12, 15, 18, 10, -14, -6, 5, -18, -14, -16, 24, -22, 49, -25, 13, -7, 26, -6, 9, 18, 11, 10, -14, -26, -14, 31, 11, 35, -35, 54, 60, -18, -11, 1, -15, -17, -3, -22, -14, 12, -17, 12, 11, -16, -11, -17, -33, -10, 22, 4, 13, 12, -24, 22, 72, -3, 6, -17, -29, -32, 2, 7, -33, -9, 4, 31, 2, 22, -2, -9, 16, -27, -22, -17, -18, -11, -4, -32, 22, 2, -17, 14, 31, -34, -19, -46, -33, -9, -18, -20, 12, 16, -68, 48, 54, 9, -14, -6, 24, 26, 41, -5, -23, 1, -1, -13, -21, -12, -6, 14, -13, -30, -3, 10, 29, 14, 18, -4, 28, -10, -18, -9, -18, 19, 9, -3, -43, 11, -7, -19, 20, 1, 10, 24, 21, 3, 3, -29, -32, -15, 12, -3, 7, 14, -20, 2, -15, 17, -21, -39, -33, -4, 22, 1, 12, 41, -80, 16, 61, -17, 23, 17, -2, 7, 2, 4, -55, 33, -13, -1, 26, 25, -1, -21, -37, -7, 7, -21, -14, -4, 20, 23, 25, 31, 8, -1, 28, -7, -17, -27, -20, 19, 5, -36, -3, 12, 3, 7, 37, -34, 16, -19, 0, -30, 38, -13, 10, 15, -7, 21, -13, 13, -8, -11, -40, 8, -25, -1, -24, 11, -48, 32, 41, -21, 9, 19, -30, -22, 18, -30, -40, -2, 27, 14, 9, 29, 5, -53, -19, -1, -4, -9, 4, 4, -4, -9, 61, -16, -13, -7, -16, 26, -2, -14, -37, 16, -28, -4, 13, 11, -10, 15, 71, -23, 11, -20, -16, -8, 30, 29, -25, 22, 10, -4, 23, -15, 15, -2, -70, 8, 38, 11, 31, 28, -32, 30, 48, -21, 15, -15, -34, 6, 7, -45, -36, 29, 14, 6, -2, -12, 22, -21, 1, -17, 6, 11, -18, -3, 23, 0, -11, 8, 6, -21, 2, 6, 9, -10, -45, -25, -25, 1, 25, -7, -22, -14, 13, -11, -8, -46, -11, -35, 26, 4, 3, 9, -19, 14, 5, 9, -28, -40, -19, -21, -9, 18, 30, 1, -70, 69, 57, 4, -6, 26, 23, -13, 11, -22, 5, 35, -31, 22, -5, 30, 1, -31, 0, -31, -20, -25, 3, -6, 14, -18, 27, -1, 4, -3, -11, 17, 45, -5, -14, -1, -3, -29, 9, 5, 4, 3, 33, -5, 1, -18, -16, -3, 28, -18, -3, 25, -25, 23, 21, 14, -10, -24, -33, -5, 28, -1, 23, 42, -69, 33, 18, 13, 9, -11, 25, -23, 14, -21, 5, 20, 25, -20, -21, 7, 20, -33, -25, -39, -23, 15, 25, -12, 2, -38, 55, -3, -29, -18, 22, 9, -24, 9, -54, -20, 22, -11, 1, -17, -17, 4, 23, -20, 36, -22, 11, -20, 58, -8, -29, -14, -36, -10, 15, -9, -37, 5, 8, 1, 9, 27, -3, -2, -53, 9, 45, 14, 4, -5, -5, -19, 41, -1, -20, -12, 13, 7, 0, -11, -2, 0, -1, -11, 11, -6, 23, 15, 36, 5, 40, -17, 21, -31, -23, -11, 39, 2, -36, 4, -13, -18, 14, -9, -3, 2, 40, -19, 1, -19, -10, 5, 15, -41, -14, -24, 1, -10, -27, -38, -15, -31, -23, -17, -11, -12, 2, -5, -79, 36, 54, 13, 12, 6, -3, -27, 16, 9, -35, 12, -9, 4, -10, 23, -3, 12, -39, 2, 1, -3, 10, 24, 7, 21, 68, -3, -1, -5, 7, -21, 42, 31, -47, -19, -20, -10, -10, -4, 16, 20, 88, -13, -24, -3, -31, -33, 30, -5, -8, -24, -20, -7, 29, -32, 16, 14, -75, 1, -4, 24, 21, 0, -86, 71, 56, -19, 3, -33, 21, 2, 16, -1, -6, 23, -11, 5, 5, -1, 18, -43, -9, 8, 2, 4, 33, 19, 5, 38, 16, 20, 16, -24, 16, -31, -9, -14, 6, -24, -21, -3, -6, 18, 11, -5, 37, -39, 28, -11, -10, -15, 13, 4, -17, 5, -34, 28, 11, -5, -6, -28, -15, 4, 36, -18, 24, 17, -22, 23, 32, -39, 28, -13, 2, 32, 36, 28, -62, 53, 6, 10, -8, -14, 17, -30, -32, 21, -8, 18, -4, 18, 14, 19, 14, 2, 15, -6, 0, -12, 34, -16, -60, -30, -14, 17, 2, 14, 24, 16, -5, -33, 17, -11, -27, -8, 18, -13, -16, 27, 7, 24, 1, -21, -11, -12, -4, -15, 6, -38, 6, -4, -48, 37, 36, 1, -6, -3, 21, -5, 1, -8, -21, -7, -5, -24, 5, -18, -10, 8, -11, -6, -6, 4, 10, -11, -4, 32, 53, -2, 6, -26, 6, 1, 29, 5, -41, 12, -21, -4, 11, 2, -30, 31, 56, 0, 0, -18, 6, -5, 54, -7, -33, -30, -18, -15, 38, 9, 5, 3, -31, -8, -14, 14, 11, 17, -48, 13, 18, -4, 0, 34, 16, 25, 43, -26, -22, 6, -3, 8, -14, -24, 11, -20, -5, -1, 7, 16, -21, 32, -21, 5, 33, -4, -7, 6, -7, 9, 38, -25, -26, -12, -27, -19, 2, -19, 0, -3, -10, 20, -26, -27, -29, -26, 28, -47, 11, 7, 11, 14, 24, -41, 6, -5, -39, -15, 26, 16, -13, 42, -68, 27, 71, -17, 29, 8, -14, -5, 12, -27, -44, 12, -20, -26, 28, 5, -2, -65, -29, 24, -1, -22, 24, 28, 13, 35, 23, -15, -8, -39, -10, 10, 6, 12, -28, 14, 1, -28, 4, 10, 8, 29, 25, -16, 26, -45, -6, -44, 21, -37, -28, -27, -32, 3, 21, -44, -25, -41, -34, 3, -16, -16, 8, 1, -74, 16, 37, 4, 11, 3, 18, -20, 17, -24, -22, 12, -35, -23, 13, -23, -22, -27, -12, -17, 21, -22, 27, -7, 22, -22, -22, -2, 19, -5, 8, -40, 1, 6, -18, 7, -10, -14, 21, 16, -6, -8, 2, -40, 19, -25, -32, -42, -2, -8, -7, -9, -3, -19, -12, 5, 26, -3, -11, 19, -17, -8, 14, 33, -44, 51, 55, -9, -1, 10, 8, -16, -16, -40, -57, 11, 5, -20, 6, -20, 1, -20, -29, -13, -19, -26, 18, 19, -20, 28, 14, -16, 34, -36, -22, 1, -5, 41, -51, -14, -16, 3, -4, 22, -12, -4, 38, -1, -7, 4, 9, -6, 12, 23, -27, -11, -21, 6, 2, -27, -2, -43, -21, -2, 8, 2, -14, 36, -74, 16, 64, -18, 5, -6, -10, -4, -7, -2, -62, -2, -24, 6, 13, 19, 5, -12, -36, -13, -42, -14, -4, 4, 5, 8, 46, -26, 18, -16, -19, 10, 0, 0, -1, 3, -23, 24, -10, -14, 17, 8, 53, -43, 30, -40, -31, -19, 6, -5, -21, 7, -26, 6, 16, 1, -12, -37, -30, -26, 0, -24, 28, 10, -58, 18, 54, 3, 11, -11, 5, -16, -6, 3, -25, 19, -13, 15, -3, 2, 0, -26, -30, 9, 18, 21, 0, 6, 13, -17, 31, 17, -21, 3, -18, 13, 15, 19, -30, -11, -20, -5, 32, -24, 5, 24, 19, 6, 31, -29, -20, -31, 9, -20, -11, -21, -8, 10, 25, -7, -1, 0, -27, 2, -20, -6, 30, 32, -68, 53, 52, -24, 26, 8, 1, 6, 13, -34, -44, 21, -2, -14, 20, -15, -30, -21, -39, 23, -25, 11, -23, -6, 29, 37, 22, -15, 15, 4, 16, -26, -5, 7, -58, -8, 3, 18, -1, -26, 28, 16, 26, -21, 14, -31, -6, -24, 5, 20, -22, 14, 10, -4, 10, 8, -14, 38, 8, -9, -22, 4, 10, 10, -64, 47, 53, -25, -3, 7, -15, -3, -2, -39, -44, 12, -3, -10, 0, 0, -19, -1, -55, 3, -8, -14, -7, 38, 11, -31, 13, 20, 14, -20, 20, -14, -13, -24, -40, 13, -30, -9, -2, -21, 17, 58, 83, -5, 2, -32, -33, -11, 36, 14, -11, 12, -16, 4, -6, -4, -27, -11, -48, -2, 34, -22, -14, 8, -62, 46, 42, -17, -14, -11, 12, -11, 27, 12, 0, 10, 5, -3, -15, 4, -6, -14, -11, -31, -11, -17, -4, -11, 32, 9, 13, -11, 8, 2, -28, -1, 14, 1, -44, 4, -4, 6, 20, 18, -12, -8, 38, -5, 6, -23, 11, -6, 26, 0, -26, 2, -6, 26, -7, -22, 18, -15, -19, -16, 5, -22, -5, 18, -48, 1, 67, 11, 2, -4, 22, -18, 6, -45, -28, 13, -18, 18, 3, 25, 6, -32, -22, -17, -14, 11, 21, 16, -6, 13, 22, 4, 24, -2, 17, -18, 17, 11, -33, -19, -10, -27, 14, -1, 22, 33, -3, -25, -13, 2, 0, -19, -3, -21, 13, 32, 1, -10, -13, 7, 1, -47, 19, -21, 33, -16, 29, 39, -45, 26, 85, -14, -4, 23, -2, -8, -12, -33, -37, 21, -19, 13, -3, 25, -4, 2, -24, -30, -13, -12, 27, 37, 9, 24, 38, 0, 17, -27, 34, 17, 9, 16, -35, 9, -4, -28, -6, -13, -43, 11, 23, -4, 17, -5, -27, -28, 11, -9, -3, 11, -15, -25, 7, -16, -10, 1, -12, -8, -6, -4, 19, 13, -57, 51, 24, -17, 20, 25, 1, 2, 18, -8, -70, 11, 5, 2, 9, 3, -40, -31, -7, 24, 20, -19, 9, 0, 1, -25, 3, 2, -6, 6, -15, 11, -5, -29, -17, 3, -31, -6, -20, 6, -4, -14, -6, -16, 35, -2, -2, -42, -26, -21, 7, 3, -16, 29, 27, -1, -25, 43, 34, -3, 13, -2, 28, 23, -67, 32, 73, 11, -17, 19, -21, -4, -43, -36, -32, 20, 4, -7, -7, 13, -13, -34, -22, -29, -5, -14, -2, -21, 12, 20, 14, -18, 7, -32, 10, 17, 38, -9, -26, -11, -5, -29, -7, -16, -17, 12, 31, 5, -11, -42, -28, -28, -26, -12, -8, 8, 17, 8, 23, 24, -16, -21, -27, 16, -10, -22, -18, 1, -51, 57, 64, -4, -3, -10, -13, -17, -4, 1, -35, 24, -15, -11, 14, -21, -9, -4, -45, 8, 0, -18, 0, 20, 0, 20, 17, 17, 16, -40, 12, 10, 25, 52, -35, -2, -18, 2, 19, 15, -8, -2, 66, -30, 12, -35, 25, 1, 13, -20, -6, -15, 16, -12, 40, -18, -12, -12, -8, -20, 13, -4, 3, 45, -56, 20, 50, 25, -5, 11, 32, 29, 19, -4, -7, 4, -36, 0, -8, -17, 5, 7, -19, 14, 1, -23, 3, -13, -1, 3, 28, -9, 22, 5, 8, -14, 29, 3, -32, -1, 12, 15, -29, 5, 41, -10, 56, -37, 19, -20, -17, -9, 36, 1, -31, 9, 16, 20, -3, 23, -10, 1, -43, -46, 22, -2, -15, -1, -51, 44, 71, -2, 6, -4, -4, 33, 29, -25, -29, 55, -13, -7, 9, -18, 13, -39, -45, -20, 13, -26, -6, 3, 40, -27, 37, -32, -21, -16, 17, 7, 68, -9, -4, 33, -16, 3, -21, 6, -9, 40, 8, -37, 15, -20, 16, -26, 61, 10, -22, -16, 7, 23, 47, -11, -28, 3, 24, -29, 2, -3, 24, 42, -31, 52, 47, 22, 9, 25, 16, -1, 15, 2, 17, 42, -19, -15, 31, -14, 11, 11, -28, 9, -16, -21, 0, 23, 30, 9, 27, -23, 22, -10, -19, 7, 66, 17, -23, 21, -3, -13, 20, 27, -24, 34, 74, 13, 8, -37, -19, -6, 42, -6, -7, 12, 2, 12, 28, 4, 10, 14, -3, 0, 49, 18, -3, 19, -63, -20, 31, -18, 15, -11, 0, -22, 32, 4, -22, 17, 11, 8, 5, 7, -28, 7, -15, 29, -8, 22, 9, -39, 3, 2, 4, 12, 23, -3, 25, -9, 35, -11, -21, 20, 2, -7, 19, 6, -12, -19, 39, -29, -5, -36, 0, 30, 11, -62, 2, -16, 16, 33, 21, 23, -12, -11, 42, 4, 26, 
  10, 1, -11, 53, -55, -24, 16, -27, -2, -19, -10, 34, 11, -2, -20, 13, -6, 21, -29, 57, 3, -12, 3, -13, -12, 8, 18, -7, 10, -17, -15, -5, 10, 16, -15, 24, 41, -24, -37, -2, 7, -18, -35, -37, -37, -56, -9, 13, 5, -5, -18, 49, -63, -21, -21, -4, 12, -15, -11, 1, 2, 82, -35, -9, 17, 11, -1, 70, -9, -18, 27, 3, 2, 8, -6, -4, 8, -49, -21, -34, -21, -5, -26, 9, 2, -17, 10, 15, 16, -5, -8, 1, -33, 30, -21, -5, -18, -25, 8, 64, -40, -20, -24, -15, 0, -19, -32, 27, -26, -14, -23, 6, -24, -9, 22, 19, 25, 2, 26, 7, -8, 3, -20, -27, -4, -26, -31, -40, -12, 7, -30, 69, -62, -39, -9, -29, -7, -14, -24, 4, 10, -62, 7, 10, -20, 1, 8, 82, -33, 7, -3, -15, -5, 4, -13, -15, -37, -27, -18, 20, 5, 6, -18, 113, 25, -28, 19, -24, -36, -9, -20, -6, 11, -14, -1, -6, 11, -14, 14, 7, -32, 10, 39, -9, -5, -2, 24, -35, -18, 17, -26, 12, -2, -7, -34, 58, 5, -46, -15, 15, -11, -24, -2, -15, -2, -34, 0, -14, 26, -29, -36, 34, -18, -17, -20, -12, -10, 19, -11, -2, -7, -2, 7, 25, -24, 12, -7, 107, -37, -5, -3, -21, 31, 3, -12, 9, 38, -46, 22, -22, 8, 4, 9, 84, 26, -15, 1, 4, -20, -6, 27, 5, 19, 13, -35, -20, 12, -3, -45, 47, -47, -50, -9, 23, 20, -1, -6, 33, -20, -51, 12, 6, -17, 10, -18, 19, 14, -19, -12, -31, 8, 12, -6, -30, -19, -15, -22, -36, 1, -18, 2, 16, -25, -22, -16, -6, -4, -33, -8, -10, -1, 24, -28, 8, -4, 27, -8, -24, -48, -46, 18, -26, 3, 17, 28, 7, -16, -20, -27, 28, -6, 21, -38, 92, -28, -24, -5, -6, 11, 27, -33, -29, -17, -41, -12, -5, -7, -44, 18, 22, -39, -17, 8, 12, -11, -7, 9, -15, -33, -25, -4, -10, -15, 3, -9, 63, 19, 6, -3, 4, -25, -9, -31, -36, 8, 34, -1, 23, -13, -12, 17, -3, 1, -3, -19, 1, 16, -11, -10, 3, 1, -39, 6, 33, -9, 24, -41, 29, -35, -49, 5, -33, -2, -4, 3, -46, 25, -42, 18, -21, -39, -12, 6, 32, -7, -42, 17, -6, 10, 35, -26, 11, 13, 7, -11, -10, -18, -16, -38, 28, -68, -14, 2, 20, 7, 36, 23, -3, -21, 4, -4, -24, -27, 32, 12, 47, 20, -14, -26, 18, 5, -24, -19, -8, -3, -6, -42, -14, -15, 9, -29, 50, -30, -29, -34, -30, -9, -25, -6, 3, -14, -88, -23, -38, -4, 2, 8, 36, 10, -3, -23, -4, 26, -1, -58, -7, -20, 16, 1, 15, -10, -28, 9, 8, -11, -17, -31, 2, -8, 5, -1, 3, -14, 0, -10, 0, -14, -14, -27, 51, 9, -3, 1, -12, -11, -32, -6, 7, -16, 71, 13, -3, 6, 20, -46, 47, -35, 8, -22, 19, -5, 18, -15, -21, -9, -66, -16, -12, -5, -5, -16, 59, -5, -21, -6, 20, -19, 6, 14, -48, 12, -59, 33, 17, -12, 3, -12, 41, 2, -8, 23, 18, 1, 1, 14, -7, -9, 2, -21, 21, 11, 15, 26, 20, -10, -1, 4, 2, -2, 39, 3, 16, 3, -3, -45, -9, -2, -8, -10, 33, -25, -33, -14, 1, -14, -20, -41, -7, 5, -49, 26, 16, -6, 5, -21, -10, -49, -31, 13, -24, 24, 5, 32, 7, -4, -8, -17, 15, 12, 3, 10, 42, 48, -13, -8, -20, 5, -13, -17, 15, -15, -13, -15, -2, -25, -5, -11, 22, 32, -7, -31, 23, -23, 8, 29, -19, -9, -12, -17, 18, 17, -16, 6, 24, -36, -48, -1, -15, 26, 15, -7, -29, 24, -56, -3, -5, -5, -6, 22, 51, -8, -15, 12, -7, -15, 12, -10, 13, 7, -14, 12, 31, -29, 13, -6, 34, 33, -8, -32, 8, -3, -2, -10, -3, -14, -43, -8, -12, 2, 10, -8, 44, -33, -26, 7, 6, -44, -21, -21, 2, -19, -8, 13, -19, -17, 10, -4, 56, -5, -33, -3, -1, 8, 35, -4, -16, -13, -62, 19, -3, -24, -16, -41, 53, -13, -13, -5, -2, 8, -17, -5, 37, 6, -13, -4, 3, 21, -5, -16, 28, -25, -6, 19, 28, -23, 9, 0, -48, -45, 27, 3, -18, 17, 31, 13, 16, -3, 3, -25, -16, 19, 4, 9, -5, -32, -21, 8, 37, -2, -12, -17, 62, -38, -15, -6, -3, -15, -19, 10, -9, 22, -40, -26, 8, -4, -8, -21, 69, 11, 5, -9, 15, 12, -10, -46, 20, 3, -38, -23, -32, -8, 8, -34, 55, 0, -16, -16, -26, 0, -29, 23, -12, -45, 38, -14, -17, 23, 3, 3, -8, -59, -4, -8, 2, 22, 53, 3, -14, -2, 72, -33, 36, 8, -37, -13, 21, -39, -40, -28, -14, 6, 10, -6, -5, 13, -14, 5, 10, -5, 13, -11, 38, -31, -27, -19, -22, -11, -3, -43, 26, 17, -2, -7, 12, 22, 27, 30, 65, -65, -24, -11, 11, 16, -35, -13, -17, 6, 5, -19, -35, 25, 12, -5, -9, 28, -41, -17, 8, 2, 1, -26, 6, -32, -4, -34, 0, -12, -8, 1, 58, -12, -43, 6, -9, 23, -6, 0, 25, 29, -14, 14, 0, -20, -5, -7, 34, -14, -12, 7, 2, -3, -34, -4, 41, -3, 13, -7, 1, -5, -15, -37, 41, 49, 3, 0, -6, -9, -17, 10, 1, -33, -12, -2, -29, -21, 15, -8, 59, 9, -29, -8, -5, 20, 9, -19, 5, -7, -95, 14, 11, 5, 26, -14, 45, -43, -17, 6, 4, -11, 28, 0, -1, -4, -41, -21, -31, 16, -9, 7, 59, -1, -13, 22, -16, -26, -22, -22, 22, 1, -12, 18, -29, 24, -31, 9, 39, 14, 7, 17, -18, 4, -17, -10, -9, -5, 28, -3, 1, 33, -12, -34, 42, -37, -4, -24, -25, 9, -3, -23, -14, -67, -42, 18, -18, 5, -23, -4, 79, -13, -54, -26, -20, -20, 9, -4, -31, 7, -84, -3, -22, 3, -31, 6, 54, 14, -15, 13, -25, 28, -35, -35, -22, 26, -18, -40, -15, 1, -24, 22, 47, 30, 32, -9, 12, 9, -3, 14, 11, -5, -10, -20, -5, 6, 7, -17, 48, -14, -13, 2, 4, -12, -16, -16, 42, 4, 17, -43, -30, -2, -21, -25, 49, -38, -27, 11, -20, 25, -9, 1, -46, -4, -48, -10, -4, -23, -31, -20, 41, -17, 5, -11, -13, 9, -21, -2, -29, 7, -36, 17, -1, -2, -26, -24, 41, 4, -6, -9, 11, -24, 11, -15, 3, 15, 13, 10, 13, -15, 17, 7, 57, 18, -3, 10, 21, -34, -10, -18, 4, -5, -25, -9, -25, -19, -18, -41, 56, -11, -67, 3, -24, 9, -19, 9, 5, -18, -70, 2, 23, 28, -17, 5, 101, -18, -28, -3, 6, -10, 19, 21, 30, 33, 5, -3, 21, 32, -24, -2, 44, 5, -13, -9, -10, 26, -31, 5, 27, -35, -13, -13, -3, -1, -12, 19, 28, 4, -21, -25, 11, -13, 13, -15, 1, -12, -40, -9, 14, 9, 2, -6, 56, -54, -17, 11, 13, -24, 13, -13, -48, -8, -72, -27, -26, -1, 3, -24, 73, -47, -45, 17, -9, -24, -16, -40, 5, 12, -1, -10, -8, 15, 14, -9, 50, 9, -43, -26, -3, 6, -34, -32, 14, 8, -26, 17, 24, -21, -24, -16, 16, 23, 8, -26, 16, 9, -8, -18, 14, 0, 14, 1, -33, 8, -9, -29, 22, -34, -20, 24, -14, 10, -16, -30, -40, -36, -61, 6, -19, -20, -22, 18, 19, -3, -7, -16, 3, -6, -18, -11, -37, -20, 1, 7, -14, -26, 0, 11, 47, 3, -15, 3, 16, -12, -54, -27, 15, -1, -5, 17, -24, -23, -27, -21, 48, -13, 11, -36, -29, -10, 7, 23, 31, -24, 0, -27, -18, 12, -24, -35, 59, -24, -31, 20, -12, -27, 11, 11, 13, -19, -38, -4, -32, -7, -4, -15, 75, -9, -31, 28, -7, 2, -11, -11, -54, -39, 19, -17, -33, 23, -21, -11, 53, -41, -11, -23, -20, -4, -1, 12, -2, -27, -10, -9, -15, 30, -17, 1, 80, -42, -19, 9, 0, 2, -11, 18, 27, 20, -40, -8, 11, -19, 2, -12, 61, -28, -40, -32, -6, -1, -23, 20, -21, 7, -27, 16, -12, 2, -8, -14, 44, -12, -5, 12, 22, -2, -26, 14, -20, -13, 2, -28, 6, 10, -24, -19, 65, -23, -10, 13, 27, -17, -9, -11, 24, -19, -31, 23, 6, 35, 30, -17, 45, 28, -32, -7, 15, 11, -4, 18, 10, -27, 120, -4, -16, -14, 31, -8, 44, -29, -64, -18, -10, -22, 11, 36, -5, -11, -14, -30, -27, 26, 11, -23, 30, -4, 25, -28, -1, -15, 11, -25, -3, -6, -83, -25, -19, 27, 10, 1, -2, -38, 0, 0, 15, -20, 23, 27, 44, -2, -32, 7, -15, -9, -1, -15, 26, 8, -9, -9, -20, 14, 28, -11, 16, 19, 42, -7, -39, 6, -5, -7, 41, -29, -40, -15, -6, 2, -29, -35, 26, -4, -80, -8, -28, 9, 23, 3, 53, 12, -54, -4, 1, -8, -32, -38, 15, 8, 39, -25, -14, 6, -2, -6, 58, 3, -18, 9, 4, 1, -2, -11, 14, 0, 4, 7, -4, 30, 14, -14, 29, 19, 0, -32, -3, -13, -22, -16, 9, -32, 34, 9, 12, -24, 20, 12, 89, -9, -22, -8, -7, 38, -35, -44, 6, -17, -68, -12, -18, 22, -6, -41, 56, 17, -17, 20, 7, -14, -19, -1, 27, -5, 23, 21, 27, -26, 16, -19, 42, -9, 1, -26, -14, 6, 1, -19, -21, -28, 46, -8, -13, -3, -22, 25, 60, -29, 34, -20, 22, 0, -46, 16, -7, 11, 42, -8, 4, -13, -9, -39, 39, -12, -51, -17, -3, -26, -45, -8, -4, -30, -43, 5, -6, -29, 12, -6, 53, 3, -40, 7, -10, 3, -12, -29, 14, -12, -55, -8, 16, 19, -8, -21, 81, -1, 18, 5, -24, -19, 16, -7, -9, -20, 43, 4, -16, 16, 1, 29, 43, -19, -14, -5, 18, 11, 10, -15, 14, 6, 30, 7, -11, -14, 2, -1, 96, -48, -42, 39, -6, 2, -14, -36, -32, -24, -65, -15, 8, 10, -51, -20, 47, -49, -30, -3, -2, -24, 9, 19, -6, 16, -20, -16, 17, 8, 19, -9, 37, 24, -24, 17, 6, 25, 5, 8, -15, 12, -22, -21, 27, 22, 0, 21, 34, 19, 10, 31, 18, 18, 43, 7, -12, -8, 4, 20, -25, -25, 20, -2, 99, -16, -42, -14, 13, -3, 10, 36, -24, -14, -29, -8, 9, -16, -24, -30, 12, -49, -47, -2, -3, -16, -15, -22, -35, -13, -42, -12, 17, -9, -28, -20, 96, 13, 2, -7, -24, 3, -6, 11, -24, 17, 31, 20, -5, 2, 8, -9, 5, -17, 32, -13, -17, 17, 0, 0, 4, -31, 27, 7, -4, 9, -9, -28, 60, -47, -32, -26, -7, 20, -12, -18, -33, 10, -39, -16, 1, -1, 11, -29, 56, -29, -33, 14, 11, 16, -34, -11, -27, -25, 16, -20, 7, 11, -1, -20, 59, -9, -2, -25, -21, 3, 12, 15, -27, -2, -7, 9, -11, -18, 26, -21, 49, -14, -26, 14, 5, 9, 1, 29, 16, 27, 35, -6, -43, -10, -1, 8, 59, -6, -17, -6, -8, -17, -31, 1, -2, -37, -47, 9, 17, -9, -11, -1, 44, -20, -50, -14, -17, -1, -27, -17, 40, 0, 1, -14, -18, -1, -17, -1, 86, -27, 0, -19, 5, 4, 9, -3, -38, -13, 1, 11, -13, -22, -4, 9, 35, 14, -19, -30, -9, 26, -7, 22, 29, 50, 52, 5, -14, 1, 21, -18, 55, -79, -29, 47, 20, -25, 18, 24, -16, 5, -60, -14, 12, -1, -24, -27, 43, -8, -11, -1, 6, 0, -22, -25, -28, 8, 26, -20, 12, 4, 6, 16, 27, 15, -16, 29, -12, -13, -8, -10, 10, -32, 18, 8, -25, 5, 12, 23, 11, 27, -37, 23, 21, 27, -24, 4, 45, -44, 32, 10, -1, 9, 29, 12, -5, -33, -34, -3, -24, 0, -9, -20, 12, 5, -75, 14, -9, -7, 1, -20, 75, -11, 9, -6, -5, -9, 13, 20, -46, -20, 28, 1, 7, -19, 24, -20, 5, -17, -10, 16, 9, 8, 12, 1, 35, -19, -9, -2, 17, -23, -12, 1, 55, -14, 0, 13, -32, -17, -27, -12, -26, -4, -18, 5, -24, -23, 21, -22, 59, -27, -20, -1, -27, -22, -22, 7, 24, -1, -83, -11, 5, -12, -24, -4, 47, -21, -45, -3, -24, -25, 10, 29, -27, -3, 20, 22, -24, -26, -22, 3, 29, -27, -2, -18, 19, 2, -18, -22, 12, 3, -21, 25, 12, 36, -4, 18, 65, -10, -26, -20, -9, -38, 2, -15, -17, -17, -20, -9, -24, 18, -11, -29, 100, -44, -23, 33, -34, 27, -11, -7, 13, -17, -73, 4, -20, 9, -9, -7, 46, -45, -30, 28, 6, -24, 3, -13, -11, -9, -14, 20, 25, 20, -34, 17, 53, 6, -23, -2, 21, -20, -36, -2, 29, -26, -24, -17, -33, 22, -26, -14, 18, -32, 31, 17, -7, -5, -1, 2, -20, 25, 51, -2, 9, 6, -2, -24, 57, -9, -28, 6, -34, -5, 13, 34, -14, 10, -12, 6, -5, -13, -24, -4, 26, -8, -29, 8, -31, 20, -1, -31, -22, -23, -16, -29, -10, -3, 12, 3, 60, -22, 12, 16, -3, -37, -16, 14, -7, -7, 29, 11, -16, 15, 29, 13, 56, -33, 13, -22, -3, 19, -31, 32, 18, 33, 36, -17, 4, 8, 10, 10, 41, -54, -34, 0, -33, 8, -18, -31, 16, 17, -85, 7, -26, 28, -25, 8, 96, -10, -3, -17, 28, -30, 8, -18, -13, -26, 36, -23, -19, -13, 2, -27, 46, -7, 8, -1, -15, 5, -35, -20, -23, 13, 5, 12, -17, 14, 4, 35, 27, 3, 2, 13, -13, -4, -1, -22, -19, 37, 57, 9, -22, 22, -4, -39, 36, -47, -31, 22, -1, -6, -14, -17, 21, -9, -60, -10, -32, 5, 12, 15, 80, 12, -10, 2, 0, -29, -2, 5, -15, -1, -11, 2, 18, -34, 29, 3, 52, -49, -1, -22, 16, -18, 15, -24, -10, 2, -18, 8, -2, 20, -33, 7, 42, 9, 29, -35, 9, 16, 20, 15, -16, 19, 25, 2, -7, 25, -6, -11, 61, -10, -15, -19, -7, -14, 29, -5, -3, -19, -50, 7, -12, -20, -8, -24, 18, -21, 24, 5, -5, 9, 2, -14, 4, -15, -21, 10, -27, 11, 3, 24, 68, 12, -14, -11, -5, -2, 6, 13, 32, 19, -25, 15, -15, 3, -8, 7, 58, -37, -36, 20, -8, 1, 19, 1, -23, -14, 0, -22, 4, 0, 3, -17, 20, -38, -14, 2, -28, 26, 13, 6, 22, 8, -17, 11, -21, -34, -27, -12, 53, 5, 12, 14, -36, -9, 7, -29, 27, -11, -10, -34, -2, -10, 18, -3, 52, 4, -16, 1, -7, 13, -9, 22, -15, -25, 4, -24, 9, 12, 22, -2, 56, -13, -27, 5, -14, 21, 7, -13, 23, -5, -56, -33, -13, 17, -20, -17, 46, -32, -54, -15, -35, 11, -2, 11, -5, 5, -37, -11, -31, -28, -33, 2, 16, -12, -27, -5, 0, 19, 2, -2, -4, -30, -39, 16, -29, -25, 36, 12, 41, -10, -25, 27, -31, -8, -17, 25, 8, 36, 12, 19, -1, -20, 24, 3, 77, 12, -9, -14, 10, 28, 9, 18, 6, 37, 84, -4, 10, -14, 26, -21, 24, -27, -30, -7, -32, 18, -1, 0, 41, 4, -8, 9, -15, 9, 1, -23, 12, -14, -14, 8, -10, 18, 0, -9, 3, 10, -33, 3, 2, -4, -22, 16, 44, -51, 5, 13, 4, 21, 2, -15, -18, -17, 33, 3, 3, 16, -27, 27, 62, 22, -32, -11, 19, 20, -23, -16, -16, 47, 44, 23, -7, 3, -41, -23, 32, -45, -18, 25, -20, 0, -28, 3, 20, -3, -39, 10, -13, -8, 3, 9, 80, 2, -2, -3, -17, -24, -15, -2, -32, -13, -30, -11, -14, 9, -4, 8, 31, -45, -21, 0, -25, -4, 29, -25, 22, 4, 35, -3, -23, -15, 32, -16, 39, -19, -9, 4, 15, -20, -39, -3, 27, -16, -41, -7, -5, 17, -28, -18, 38, -35, -17, -7, 4, -10, -25, -25, 23, -28, -59, 10, -15, 0, 19, 2, 66, 15, -18, -22, -14, -36, -1, -29, -28, -35, 54, -4, -32, 20, -12, -25, 38, 23, -6, 14, 9, 27, -27, 4, 13, -10, -15, -15, -6, -7, -27, 13, 73, 30, -30, -25, 13, 8, -14, 0, -4, -30, -38, 0, -16, 4, 7, -17, 30, 1, -26, 17, 4, 3, 31, 29, 12, -12, -29, 17, -14, -21, -20, -38, 49, 1, -36, -10, -13, 14, -3, 14, -4, 12, -6, -15, -11, -19, -27, 6, 15, -9, -57, -25, 1, -11, -1, 49, -16, -18, -5, 20, -3, -30, -14, -16, 9, -55, -23, 16, -24, -32, -21, -17, 44, 13, 58, -27, 13, -32, -23, -10, 40, -46, -47, -21, -6, -5, -16, -6, -14, 11, -9, 7, 0, 2, -3, -23, 70, -18, -28, 0, -3, -9, 1, 0, -11, -1, 13, -37, -17, 15, -4, -9, 58, -20, 13, 7, -17, 13, -15, -8, -4, 10, -19, -13, -19, 1, -25, -1, 48, 3, 0, 24, -21, -6, -38, -22, 0, -2, 6, -27, -9, -10, -28, 8, 66, -10, -61, -38, 13, 13, -10, -10, -4, -29, -85, 10, -22, 21, -14, -30, 73, -32, -32, 7, -23, -16, -11, -23, -38, 22, -30, -30, -1, 0, 22, -5, 36, -21, -18, -3, -18, -22, 7, -14, -37, 6, 12, -3, -29, 28, -14, -37, -4, 11, -50, -19, 11, 0, -18, 42, -19, -9, 9, 18, 17, 11, 3, 8, 44, -23, 0, 11, -14, -21, -17, -35, -29, -32, -29, -15, -26, 10, -6, -23, 77, 4, -28, 1, -14, -13, 8, 25, -23, -18, 10, -15, -7, 15, -2, -19, 8, 4, 26, -6, -17, 12, -21, -8, -28, -11, -32, -12, -13, 2, 4, -28, 11, -17, -5, 27, -10, 15, -24, 1, -11, 22, 37, -3, -8, -25, -22, 12, 43, -21, -49, 34, -13, -10, -25, -11, -7, -12, -13, -35, 11, -23, -30, -19, 52, -46, -47, -24, -2, 38, 21, 17, -45, -29, -17, -35, -4, -24, -19, -25, 29, -16, -12, -33, 13, 11, 6, 16, -20, -34, 15, 4, -23, -18, 17, -26, 15, -18, 17, -6, -12, -9, -39, -31, 18, -41, -31, -17, -37, -12, 1, 24, 30, -34, -7, -15, 26, -1, 3, -49, 2, -19, -6, -3, 31, -14, -22, 14, 61, -26, -34, -52, -8, 10, 3, 11, 9, -1, -36, 6, -34, -6, -3, -16, 19, -26, 22, 8, 5, -37, -26, 10, 33, 9, -24, 10, -23, 0, -24, -45, 8, 26, 14, 25, 12, 11, 5, 23, 18, 5, 12, -12, 22, 
  -11, -14, 19, -32, -10, -5, -24, -13, 19, 11, 26, -38, -11, 52, -14, 0, 3, 0, 9, -37, 12, 57, 9, -7, -28, 22, -9, 16, 10, -14, 23, 5, -8, 8, 22, -22, -30, 36, 16, 21, 4, -35, 7, 21, 16, -3, -3, -17, 2, -30, 20, -74, 40, 16, -31, 20, -5, 7, 21, 7, -4, -76, -8, 4, 18, 15, 16, -12, 27, -22, -8, 3, -20, -1, -15, 23, 45, 81, -20, -13, -9, 16, 36, -56, 18, 27, -16, 3, 13, 30, -24, -14, 1, -11, 9, -2, 1, 7, 13, -45, 12, 61, 6, 13, 31, -22, -26, -22, -16, -51, 22, 28, -11, -10, 35, -76, 19, 32, 23, 11, 6, -41, 11, -15, -22, -20, -7, -6, 8, 2, -5, -28, 42, -10, 20, -3, -14, 14, -21, 24, 57, 61, -13, -14, 0, 2, 28, -31, 31, 31, 35, -17, -1, 23, 5, -14, -12, -16, -1, -21, 24, 12, 16, -65, -12, 37, 1, 8, 20, -24, -12, 6, -29, -49, -13, 9, 30, -17, 24, -29, 4, -4, 9, 31, -25, -24, 1, 14, 59, 24, 25, 24, 22, -8, 13, -1, 19, -3, 35, 14, 7, 24, -1, 7, 10, 56, -14, 4, -16, -1, 27, -39, 14, 37, 14, -14, 13, -6, -21, 21, 26, 22, 10, -12, 4, -4, 15, -58, 14, 35, -7, -13, 29, -18, 33, 20, -23, -15, -5, 7, -2, 36, -1, -50, -22, 11, 33, -9, 15, 9, 23, 42, 6, -35, 15, 20, -13, 19, -1, -4, 21, -3, -13, 1, -3, 9, -9, 19, 12, 42, -16, -20, 2, 4, 25, -45, -3, 44, -4, -14, -6, 5, 15, -22, -17, -25, 6, 20, 3, 25, 4, -60, -6, 25, -12, 31, -5, -20, 13, -27, -15, -14, -19, 24, 26, -9, -1, -42, 39, 28, 15, 28, 19, -20, -25, -7, -17, 18, 25, 9, -1, 10, -5, -12, 13, -40, 5, 11, 1, 36, 10, 5, 37, 41, -27, 40, 29, 13, -1, -15, 33, 27, -1, 31, -6, -18, 9, -23, 29, -4, 29, 30, 24, 16, 44, -45, 18, 69, 27, -5, 1, -17, 23, -17, 3, -13, 8, -20, 30, 36, 32, -17, -6, 20, 7, 27, 8, -2, 3, 34, -24, 68, 10, 21, -23, -2, -10, 20, -9, -41, -3, -17, -15, 21, 4, -2, 48, 28, -3, 8, -10, 18, -9, -26, 54, 29, -15, 12, 1, 13, -10, -43, -6, 23, 42, 42, 17, 25, 8, -9, 38, 54, 13, -2, -8, -21, 30, -38, -14, -53, 5, -14, 41, 27, 46, -59, 36, 20, -2, 31, -15, 5, 20, 2, 22, 14, 15, -6, -12, 10, 24, 20, -9, -31, 11, -11, 12, 12, -25, -33, 23, 65, 11, 34, 29, -13, 18, -31, 32, 36, 15, -7, -2, 14, 31, -34, 1, -1, 23, 32, 40, 21, 25, -13, 27, 33, 54, 11, -12, -6, 3, -16, -6, -5, 36, 27, 18, -2, 10, -62, 6, 28, -14, 16, -1, 29, 31, 14, 6, -26, 25, 0, -6, 36, 25, -7, 6, -13, -14, -26, -17, 17, 34, -12, 8, 109, -10, 26, 28, -6, -22, -22, 25, 22, 12, 19, 8, -16, -19, 3, 9, 26, 35, -23, 19, 0, -4, -23, 22, 35, -28, 2, 12, 27, -7, 0, -4, -16, -5, 33, 9, 17, 36, -44, -1, 37, -12, 10, -1, 20, 5, 13, 25, 21, 10, 17, 15, 1, -9, 12, 27, -16, 10, -9, 7, -25, -15, -9, 44, 72, -27, 26, 4, -3, 4, -29, 57, 51, -19, 8, 18, 8, -13, -41, -14, 23, 28, 22, -7, -12, 40, -43, -41, 69, 5, 36, -18, -6, 34, 28, -4, -16, -7, 20, -7, -5, 12, -30, -10, 25, 23, 9, -12, 0, 40, 1, 0, 41, 24, 7, -12, -12, 20, 27, 11, -10, -2, 10, -21, 14, 19, -26, 38, 68, -30, 26, 30, 29, 17, -34, 25, 44, -6, 21, 19, 31, 3, -4, 2, -33, -7, 5, -3, 3, 41, -44, -3, 9, 20, 1, -22, 16, -3, 33, -23, -16, 29, 27, 1, -1, 67, -127, 26, 18, 1, -10, -9, -9, 20, 3, 6, -18, 14, 1, -4, -5, 19, 2, 30, 13, 3, 27, 11, 8, -19, 0, 3, 60, -5, 31, 29, 36, -8, -45, 46, 48, 34, 5, 17, 0, -18, 3, 31, 1, 20, -10, 1, 32, 31, -74, 26, 32, 2, 10, 5, -1, -14, -24, -25, -13, 28, 11, 6, 20, 43, -40, 38, -4, 7, 18, 1, 18, 42, 38, 1, 2, 26, 19, 18, 7, 18, -36, 13, -4, 19, -8, 29, 8, 26, -14, 32, 30, -6, 37, -6, 3, 2, -64, 8, 53, 42, -7, 17, 39, -5, -8, 18, 4, 4, 25, -4, 40, 16, -48, 4, 38, -6, -1, -8, -14, -18, -3, -14, -38, 11, 9, -3, 32, 7, -43, 33, 27, 14, 3, 10, -15, 31, 8, 4, -29, 0, 30, -13, 31, 3, 28, 10, -15, 3, -16, 20, -4, 13, 27, 36, 52, 16, -7, -20, -1, -6, -37, 19, 30, 14, 27, 9, -8, 26, -1, 16, -21, 1, -3, 3, -8, -18, -42, -6, 35, 24, 39, -19, 36, 12, 8, -2, -47, -9, 16, -12, 25, 25, -34, 0, 50, 27, 23, -8, 8, 27, 24, 15, -22, -8, 3, 13, 30, 23, 25, 11, 8, 28, -24, -11, 37, 14, -21, 27, 69, -23, 20, 18, 26, 8, -39, 18, 32, 11, -25, -7, 29, -6, -38, 26, 6, 26, 20, 3, 14, 26, -19, -24, 17, 16, -12, 25, -2, -5, -11, -19, 4, 32, -6, 15, -12, 7, -37, 14, -7, 4, 7, 17, -20, 0, -9, 10, 8, 24, 7, -21, -4, 12, -7, 5, -26, 11, 4, 0, 10, 21, 3, 59, 119, -19, 4, 33, 18, 3, -62, 6, 59, -12, 31, 29, 5, -11, 10, 17, -20, 27, 9, -6, -5, 3, -35, 46, 41, -14, 24, -4, -8, 27, 2, 4, -53, 41, -2, 6, 24, 6, -99, 5, 48, 1, -14, -21, -7, 17, 25, 41, 18, -10, 26, -19, -3, -37, 13, 8, -2, 36, -13, -5, 35, -21, -22, 20, 76, 1, -10, -5, -15, -3, -36, 22, 51, 31, -7, -9, 14, 11, 2, -1, -31, 6, -6, -8, 10, -7, -63, -16, 17, -1, -6, -7, 3, 9, 10, 18, -29, 21, -20, 23, -13, 22, -45, 2, -1, 16, -2, -12, 2, 25, 21, 4, -46, 13, 27, -28, 28, 16, 2, 7, -22, 7, 17, 16, 33, 5, -6, 45, 68, -20, 35, -14, 26, 34, -63, 35, 13, 30, 14, -1, 8, -23, 42, -11, -52, -10, -15, 2, -5, 0, -82, -42, 58, 8, 35, 30, -16, 14, 12, 8, -11, 7, 29, 30, 26, 48, -100, -10, 10, 26, 6, -31, -21, 18, -12, 46, 26, 2, -7, -2, -7, 6, 1, -13, -33, 10, -19, -15, 23, 21, -16, 32, 66, -31, -10, 16, -20, -18, -55, 18, 48, -3, 20, -23, 0, -11, -17, 11, -16, 38, -14, 26, 18, 38, -37, 28, 47, 22, 15, -2, 10, -20, 16, -26, -52, 23, 14, -1, 17, 6, -57, -3, 35, 24, 18, -2, 12, 24, -12, 28, 8, 35, -7, 3, -17, -2, -23, 22, -8, -3, -5, 4, -7, -19, -23, 28, 29, -27, -11, 23, 4, -9, -51, 28, 51, -4, 3, 35, 6, 1, 1, 4, -52, 4, 20, 36, 19, 1, -78, 11, 73, 3, -5, -16, -8, -16, -21, 10, 4, -14, -23, 12, 6, 43, -56, 4, 20, 29, -13, -4, -12, 20, -11, -38, 27, 23, 26, 24, -3, -19, -4, -15, -35, -7, -5, -8, 34, 3, -11, 2, 35, -32, 33, 2, 3, -7, -50, 5, 20, 40, -1, 23, 30, 18, 22, 12, -53, 0, 3, 15, -12, -11, -56, -11, 29, 4, 0, -18, 27, -14, -40, 20, -11, 22, 5, 4, -12, 34, -40, 44, 21, -2, 7, -7, -11, 21, 17, 30, 6, 31, -12, -16, 10, 15, 30, 13, -2, -16, -8, -28, -8, 16, -13, 5, 70, -14, -12, 21, 19, 43, -45, 49, 42, -2, 2, -2, -21, 20, -20, 36, -51, 24, 12, 7, 12, 23, -54, 8, 38, -2, 6, -16, 5, 21, 3, 15, -42, 28, 7, 38, 9, 51, -80, 52, 15, 22, -7, -6, -8, 4, -12, 18, 10, 21, -11, -12, 18, -16, 32, 12, 9, -16, -7, 14, 15, -12, 13, 16, 78, -33, 3, -13, 6, -8, -30, 40, 42, 6, 32, 7, 38, 24, -6, -5, 0, 9, -24, 15, 9, 31, -43, 37, 17, -14, 13, 13, -20, -24, 10, 7, 27, 9, 20, 11, 20, 32, -57, -9, 31, 25, 17, -10, 0, 4, 5, 15, -24, -6, 1, 12, 18, -29, -24, 25, -3, 7, -16, 14, 7, -10, -8, 14, 39, -23, 9, -20, 24, -16, -17, 55, 34, 32, 20, -9, 15, 21, 20, -19, 26, 34, 30, 11, -19, -3, -42, 17, 47, 8, 20, -5, 14, 2, 5, 5, 8, 12, -18, 12, -4, 24, -31, -17, 26, 8, 19, 4, -18, 37, -3, 39, 28, -9, 6, 2, -6, -20, -22, 25, -43, -9, -16, -13, 6, -6, -2, 18, 47, 18, 23, -7, -1, -11, 1, 14, 22, 16, -15, 7, 31, 1, -44, -7, -13, 22, 8, 31, 20, 21, -62, -36, 38, -2, 24, -3, 7, 10, -3, 6, -43, 17, 9, 36, 11, 2, -29, 16, 15, 22, 19, 13, -3, -5, 16, 25, -45, -23, 1, -17, -15, -2, -13, 5, -10, 0, -32, 1, 35, 7, -17, 64, 78, -26, 22, -19, 13, 17, -51, 4, 34, -12, -5, 4, -7, 17, -18, 7, 13, 11, 5, -11, 20, 21, -54, -14, 47, 17, 12, 27, 24, 17, 27, 19, -53, 14, -19, 21, 21, 9, -79, 51, 15, -15, 17, -29, -16, 4, 34, 3, -44, 13, -18, 22, -5, 20, 16, -28, -10, 21, 7, -10, -2, -18, 9, 32, 38, 15, 28, 29, 3, 21, -31, 28, 44, 39, -8, 11, -26, -17, 0, -1, -20, 5, -18, 4, 3, 27, -41, 36, 45, -2, 9, 3, -10, 20, 3, -32, -48, 24, -6, 2, 16, 31, -70, 26, -10, -4, 21, -17, -3, 7, -20, -17, -22, 33, -26, -5, -32, -19, -36, 9, -34, 16, 20, -15, 21, 11, -39, 26, 70, -29, -14, -2, 25, 12, -38, 17, 14, -4, -7, -13, 23, -19, 7, 5, -37, 6, -20, -7, 9, 0, -29, -29, 47, 17, 16, -8, 11, 14, -13, -8, -22, -16, 14, -12, 16, 28, -20, 23, 40, 31, 33, 10, -27, 10, 5, 29, -7, 19, 11, 3, -16, 9, -12, 21, -1, 12, -24, 1, -6, 20, -5, 42, 45, -33, -11, 18, -11, 22, -26, 49, 51, -5, -9, -14, -18, -5, -14, 13, 37, 6, 8, -2, 16, 1, -102, -13, 35, -15, 33, 12, 11, 2, 25, -16, -13, -9, -6, 44, 1, 7, -7, 30, 22, -23, 33, -7, -4, 8, 4, 22, -19, 23, -24, 3, 4, -6, -39, -17, 2, -2, -12, -17, 14, -12, 11, 41, 59, -19, 23, 8, 19, 9, -31, 44, 47, -16, -4, 13, -1, 16, -8, 14, -38, 26, -14, -10, -8, 20, -25, 29, 19, 32, -15, -2, 12, -3, 14, 22, -2, 25, -13, 46, -5, 14, -65, 18, -8, -1, -4, 12, -8, 4, 16, 32, -3, 32, -2, -24, -24, -24, 14, -11, -19, -13, -21, -3, 30, 16, 24, -7, 104, -47, -24, -10, 2, 11, -65, 37, 41, -25, 21, 21, -2, 16, -28, 0, -40, 31, -4, -9, 7, 3, -53, -4, 39, 28, -6, 16, -20, -13, -8, -25, -39, 35, -21, 48, 11, 20, -65, -4, -5, -10, 11, 5, 33, 18, 5, -5, -28, 56, -3, 7, 2, 13, 21, 16, -24, 23, -19, -12, 20, -25, -1, 31, 71, 0, -11, 12, 24, 7, -45, 12, 39, -2, 27, 19, 2, 13, -44, 24, -55, 18, 1, 33, 21, 20, -52, -18, 19, 5, 15, 12, 16, 37, 18, 11, -47, 26, 10, 16, 19, -1, -71, 22, 12, 24, 30, 9, -14, 27, -7, 35, -29, 7, 4, 16, 11, 9, 7, 1, -8, 16, -1, -30, 12, -13, -39, 10, 47, -31, 10, 4, 40, -16, -67, 12, 26, -14, 3, 21, -8, 3, -7, 9, -41, 36, 9, 26, 14, 21, -58, -1, 31, 4, 15, 15, 20, 2, -7, -10, 20, 6, 7, 34, 32, 52, -19, -7, 3, -18, 25, 15, -11, 35, 17, 35, 3, 19, 9, -23, -3, -11, 22, -19, -7, -1, -14, 10, 16, -5, 3, 35, 82, 12, 14, -12, 14, 13, -22, 67, 27, -4, 11, -23, 24, -12, -33, -11, -31, 38, -5, 29, -20, 3, -40, -6, 26, 11, -18, 31, 26, 17, -33, 10, 7, 0, 4, 42, 27, 29, -56, 32, 44, 5, 24, 11, -10, -9, 30, -7, 0, 13, 24, 25, 10, -9, 2, 16, -27, -3, 22, 0, -21, -18, 5, 5, 56, 1, 26, -11, 8, 2, -42, 40, 34, -5, -12, 24, 21, -10, -8, 17, -5, -6, -11, -4, 19, 3, -45, 14, 48, -7, 25, 22, 2, -7, -2, -9, -9, 19, 31, -6, 27, -1, -40, 11, -1, -8, 37, -25, -1, 18, 3, -7, -15, 10, -8, -14, -18, -5, 1, -10, -32, 9, 3, -25, -23, -13, 14, 22, 60, -8, -29, -13, 32, -11, -24, 29, 36, 33, 19, -3, 4, -32, 25, -19, -26, 6, -19, 40, 13, 24, -42, 39, 64, 7, 30, 18, -4, -11, 9, 5, -105, 3, -2, 6, 22, 48, -8, 17, 2, -20, 10, 2, -10, 25, -16, 29, -7, 14, 29, 24, -8, -10, 22, 8, -5, 8, 9, -20, -8, 14, 10, 5, 53, -36, 14, 2, 28, 24, -69, 27, 37, -5, 23, 28, 23, -17, -17, -25, -49, 15, 32, 13, 39, 1, -82, 34, 53, 20, 5, -1, -3, 14, -11, 14, -18, 4, -12, 29, 27, -8, -17, 27, -7, 2, 15, 11, -7, 7, -10, 4, 19, 27, 21, 4, 19, -15, 28, 29, -8, 20, -1, -18, -26, -7, -17, 19, 75, -28, 24, 28, 10, -11, -28, 12, 41, 22, -15, 6, 29, 16, -5, -1, 13, 16, 34, 13, -4, 15, -62, 6, 21, 12, -7, -21, -28, 24, 1, -2, -44, 16, 26, 20, 45, 51, -24, 23, 2, 3, 29, -5, -26, -1, 40, -20, 16, 0, 7, -25, 1, -34, 31, 5, -45, 37, -31, -23, 12, -11, 7, 5, 30, -11, -3, 13, -13, -9, -36, 0, -1, 12, 12, 38, -5, 14, -35, -14, 30, -9, 25, 2, -10, 22, -40, 32, 46, -13, 27, -26, -19, 36, -21, 7, -19, 40, -4, 33, 26, 21, -51, 25, 32, -6, -9, -7, -29, 26, 3, -48, -13, 1, 24, 12, 0, 0, 15, -13, -4, 0, 15, 30, -10, -3, -3, 19, 45, -19, 35, 35, 14, 3, -24, -20, 50, 16, 26, 26, -10, -13, -28, -8, 18, 32, 10, 25, 4, 2, -45, 35, 14, -1, -7, 33, 3, 13, -3, 18, -67, 37, 19, 11, 21, 14, -91, 7, 21, -3, 29, -11, -11, 4, 12, -16, 49, 22, -2, 17, 18, -2, 11, -10, -43, 33, 14, 4, 5, 3, -39, 27, 68, -21, 27, 26, -4, -18, -57, 35, 29, 12, 32, -13, -1, -18, -36, 18, -15, 37, 24, -2, 4, 28, -63, -26, 72, 8, -5, 28, 9, 16, 2, -5, -41, 8, -2, 1, 34, 46, -55, -6, 54, 15, 5, -24, -22, 8, 9, -18, -35, 41, 21, -20, -29, 25, -9, 20, 3, 18, 15, -9, 0, -18, -27, 50, 55, -31, 31, 19, 15, 22, -44, 39, 24, 9, 6, -17, -12, -27, -4, 9, -6, -3, -12, 11, 5, 16, -23, 29, 31, -6, 38, 21, -11, 6, 0, -13, -24, 12, 18, 27, -5, 41, -11, 23, 14, -24, 26, 8, -29, -8, 33, -16, -46, 17, 32, -19, -1, 10, 0, 1, -21, 27, -3, 5, 31, 0, -34, 15, 80, -21, 2, 24, 3, 22, -37, 20, 26, 7, 15, 40, 10, -11, -36, -9, -10, -8, -3, 30, 3, 4, -54, 5, 38, -1, -1, 16, 2, 25, 9, 7, -27, 20, 11, 36, 12, 24, -36, 44, 42, 5, 30, -12, 29, 44, -9, 24, 5, 33, 16, 18, 9, -22, -4, 24, -48, 12, 29, 3, 26, 21, 6, 22, 74, -3, 15, 20, 3, -5, -25, 11, 44, 6, -8, 5, 14, 4, -32, -7, -7, 5, 1, 40, 35, 25, -39, 13, 37, 13, 20, 24, -19, 13, -24, 12, -23, -1, 28, 3, 23, 19, -75, 48, 31, 4, 33, -25, -16, -9, 31, -4, 10, 19, 1, -13, -8, -18, 0, 30, -16, 11, 18, -28, -13, -12, 39, 13, 34, 1, 27, 12, 3, 3, -15, 52, 40, 34, 19, 13, 25, 17, -6, -2, 3, -3, 23, -4, 14, -9, -34, 2, 38, 30, -3, 0, 10, 2, -2, 11, -13, 6, -29, 25, 19, 5, -18, 36, 33, -16, 32, 33, -4, -10, -4, 38, -42, 9, -20, 30, -13, -17, 19, -6, -23, 16, -23, 23, 17, -9, 8, 20, 55, 14, 20, -4, 36, 46, -39, 45, 17, 17, 33, 16, -15, -24, 6, 17, -12, 5, 9, 10, 17, 36, -31, 4, 47, 10, 30, 27, 0, 7, -2, 19, -14, 12, -17, 2, 9, 2, -47, -2, -1, -5, 10, -20, -3, 9, -10, 25, -1, 7, -24, 8, -19, -2, 5, 11, 1, 2, -5, -11, 9, 20, 5, 35, 87, -11, 41, -1, 11, -7, -25, 39, 44, 18, 23, 3, 26, 13, 19, -13, 12, 29, -9, -4, -10, 16, -66, -16, 44, 18, 20, 29, 24, 4, -12, -17, -49, 24, -10, 12, 31, 4, -83, -22, 43, 14, 10, -25, 18, -14, -14, 9, 6, 2, 12, 2, -13, -4, 2, -21, -12, 0, -11, -10, 1, 7, 15, 41, 45, -25, -19, -13, 17, -15, -19, 27, 53, 0, 6, -20, -1, -20, 18, 29, -1, 13, -17, 7, 30, 7, -62, 15, 17, 11, 13, 26, 11, -36, -20, 12, 28, 16, 21, 17, -16, 39, -48, -14, 16, -5, 24, -17, -38, 21, 14, -27, -34, 1, -15, 4, 4, -29, -4, -31, -21, 13, -20, 8, -17, 11, -5, 32, 4, -28, 6, 22, -31, 5, -22, 50, 31, -4, -15, -3, 34, 5, -24, -11, -1, 9, -4, 12, 5, 28, -54, -2, 28, 8, -13, 27, 5, 10, 34, 27, -27, 7, 4, 37, 9, 22, -94, 14, 19, -3, -5, -3, 1, -19, 19, 0, 11, 3, -7, 12, 6, -13, 15, 8, -18, 29, 6, 7, 15, 6, -10, 6, 57, -43, -26, 11, 8, 12, -104, 31, 16, -18, -3, 17, 1, -5, 0, 5, -19, 35, 16, -12, -17, -24, -71, 1, 25, 17, -15, -23, 20, -27, -10, 10, -49, 26, 9, 10, 15, -6, -41, 58, -5, 1, -3, 5, -31, 11, 19, 20, -32, 0, -27, 
};
const TfArray<2, int> tensor_dimension95 = { 2, { 3,3200 } };
const TfArray<1, float> quant95_scale = { 1, { 0.0016935192979872227, } };
const TfArray<1, int> quant95_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data96[3] = { -1092, 3155, -2142, };
const TfArray<1, int> tensor_dimension96 = { 1, { 3 } };
const TfArray<1, float> quant96_scale = { 1, { 3.3156986319227144e-05, } };
const TfArray<1, int> quant96_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const TfArray<2, int> tensor_dimension97 = { 2, { 1,3 } };
const TfArray<1, float> quant97_scale = { 1, { 0.10462809354066849, } };
const TfArray<1, int> quant97_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 3 } };
const TfLiteStridedSliceParams opdata1 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs1 = { 4, { 3,4,5,6 } };
const TfArray<1, int> outputs1 = { 1, { 7 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 7,8,9 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteStridedSliceParams opdata4 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs4 = { 4, { 11,12,13,14 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 15,16,17 } };
const TfArray<1, int> outputs5 = { 1, { 18 } };
<<<<<<< HEAD
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 18 } };
const TfArray<1, int> outputs6 = { 1, { 19 } };
const TfLiteStridedSliceParams opdata7 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs7 = { 4, { 19,20,21,22 } };
=======
const TfLiteStridedSliceParams opdata6 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs6 = { 4, { 18,19,20,21 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteStridedSliceParams opdata8 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs8 = { 4, { 3,24,25,26 } };
const TfArray<1, int> outputs8 = { 1, { 27 } };
const TfArray<2, int> inputs9 = { 2, { 27,28 } };
const TfArray<1, int> outputs9 = { 1, { 29 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 29,8,9 } };
const TfArray<1, int> outputs10 = { 1, { 30 } };
const TfLiteStridedSliceParams opdata11 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs11 = { 4, { 30,31,32,33 } };
const TfArray<1, int> outputs11 = { 1, { 34 } };
const TfLitePoolParams opdata12 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs12 = { 1, { 34 } };
const TfArray<1, int> outputs12 = { 1, { 35 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 35,16,17 } };
const TfArray<1, int> outputs13 = { 1, { 36 } };
const TfLiteStridedSliceParams opdata14 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs14 = { 4, { 36,37,38,39 } };
const TfArray<1, int> outputs14 = { 1, { 40 } };
const TfLitePoolParams opdata15 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs15 = { 1, { 40 } };
const TfArray<1, int> outputs15 = { 1, { 41 } };
const TfLiteStridedSliceParams opdata16 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs16 = { 4, { 41,42,43,44 } };
const TfArray<1, int> outputs16 = { 1, { 45 } };
const TfLiteStridedSliceParams opdata17 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs17 = { 4, { 3,46,47,48 } };
const TfArray<1, int> outputs17 = { 1, { 49 } };
const TfArray<2, int> inputs18 = { 2, { 49,50 } };
const TfArray<1, int> outputs18 = { 1, { 51 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 51,8,9 } };
const TfArray<1, int> outputs19 = { 1, { 52 } };
const TfLiteStridedSliceParams opdata20 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs20 = { 4, { 52,53,54,55 } };
const TfArray<1, int> outputs20 = { 1, { 56 } };
const TfLitePoolParams opdata21 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs21 = { 1, { 56 } };
const TfArray<1, int> outputs21 = { 1, { 57 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 57,16,17 } };
const TfArray<1, int> outputs22 = { 1, { 58 } };
const TfLiteStridedSliceParams opdata23 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs23 = { 4, { 58,59,60,61 } };
const TfArray<1, int> outputs23 = { 1, { 62 } };
const TfLitePoolParams opdata24 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs24 = { 1, { 62 } };
const TfArray<1, int> outputs24 = { 1, { 63 } };
const TfLiteStridedSliceParams opdata25 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs25 = { 4, { 63,64,65,66 } };
const TfArray<1, int> outputs25 = { 1, { 67 } };
const TfLiteStridedSliceParams opdata26 = { 13, 15, 0, 0, 0 };
const TfArray<4, int> inputs26 = { 4, { 3,68,69,70 } };
const TfArray<1, int> outputs26 = { 1, { 71 } };
const TfArray<2, int> inputs27 = { 2, { 71,72 } };
const TfArray<1, int> outputs27 = { 1, { 73 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 73,8,9 } };
const TfArray<1, int> outputs28 = { 1, { 74 } };
const TfLiteStridedSliceParams opdata29 = { 13, 13, 0, 0, 0 };
const TfArray<4, int> inputs29 = { 4, { 74,75,76,77 } };
const TfArray<1, int> outputs29 = { 1, { 78 } };
const TfLitePoolParams opdata30 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs30 = { 1, { 78 } };
const TfArray<1, int> outputs30 = { 1, { 79 } };
const TfArray<2, int> inputs31 = { 2, { 79,80 } };
const TfArray<1, int> outputs31 = { 1, { 81 } };
const TfLiteConvParams opdata32 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs32 = { 3, { 81,16,17 } };
const TfArray<1, int> outputs32 = { 1, { 82 } };
<<<<<<< HEAD
const TfLiteStridedSliceParams opdata33 = { 13, 13, 0, 0, 0 };
=======
const TfLiteStridedSliceParams opdata33 = { 13, 15, 0, 0, 0 };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
const TfArray<4, int> inputs33 = { 4, { 82,83,84,85 } };
const TfArray<1, int> outputs33 = { 1, { 86 } };
const TfLitePoolParams opdata34 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs34 = { 1, { 86 } };
const TfArray<1, int> outputs34 = { 1, { 87 } };
<<<<<<< HEAD
const TfLiteConcatenationParams opdata35 = { 1, kTfLiteActNone };
const TfArray<4, int> inputs35 = { 4, { 23,45,67,87 } };
const TfArray<1, int> outputs35 = { 1, { 88 } };
const TfLiteReshapeParams opdata36 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs36 = { 2, { 88,89 } };
const TfArray<1, int> outputs36 = { 1, { 90 } };
const TfLiteFullyConnectedParams opdata37 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs37 = { 3, { 90,91,92 } };
const TfArray<1, int> outputs37 = { 1, { 93 } };
const TfLiteSoftmaxParams opdata38 = { 1 };
const TfArray<1, int> inputs38 = { 1, { 93 } };
const TfArray<1, int> outputs38 = { 1, { 1 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension1, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3760), (TfLiteIntArray*)&g0::tensor_dimension3, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1568), (TfLiteIntArray*)&g0::tensor_dimension7, 195, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1568), (TfLiteIntArray*)&g0::tensor_dimension11, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension19, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4592), (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension27, 234, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension29, 247, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 1976, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension34, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension35, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension36, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension40, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension41, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4400), (TfLiteIntArray*)&g0::tensor_dimension45, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data46, (TfLiteIntArray*)&g0::tensor_dimension46, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data47, (TfLiteIntArray*)&g0::tensor_dimension47, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data48, (TfLiteIntArray*)&g0::tensor_dimension48, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 234, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data50, (TfLiteIntArray*)&g0::tensor_dimension50, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension51, 247, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 1976, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data53, (TfLiteIntArray*)&g0::tensor_dimension53, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data54, (TfLiteIntArray*)&g0::tensor_dimension54, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data55, (TfLiteIntArray*)&g0::tensor_dimension55, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1984), (TfLiteIntArray*)&g0::tensor_dimension56, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension57, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data59, (TfLiteIntArray*)&g0::tensor_dimension59, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data60, (TfLiteIntArray*)&g0::tensor_dimension60, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data61, (TfLiteIntArray*)&g0::tensor_dimension61, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension62, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension63, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data64, (TfLiteIntArray*)&g0::tensor_dimension64, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data65, (TfLiteIntArray*)&g0::tensor_dimension65, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data66, (TfLiteIntArray*)&g0::tensor_dimension66, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3344), (TfLiteIntArray*)&g0::tensor_dimension67, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data68, (TfLiteIntArray*)&g0::tensor_dimension68, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data69, (TfLiteIntArray*)&g0::tensor_dimension69, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data70, (TfLiteIntArray*)&g0::tensor_dimension70, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data72, (TfLiteIntArray*)&g0::tensor_dimension72, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1776), (TfLiteIntArray*)&g0::tensor_dimension73, 221, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension74, 1768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data75, (TfLiteIntArray*)&g0::tensor_dimension75, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data76, (TfLiteIntArray*)&g0::tensor_dimension76, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data77, (TfLiteIntArray*)&g0::tensor_dimension77, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1776), (TfLiteIntArray*)&g0::tensor_dimension78, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension79, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data80, (TfLiteIntArray*)&g0::tensor_dimension80, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension81, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension82, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data83, (TfLiteIntArray*)&g0::tensor_dimension83, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data84, (TfLiteIntArray*)&g0::tensor_dimension84, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data85, (TfLiteIntArray*)&g0::tensor_dimension85, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension86, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension87, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension88, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant88))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data89, (TfLiteIntArray*)&g0::tensor_dimension89, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension90, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant90))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data91, (TfLiteIntArray*)&g0::tensor_dimension91, 2496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data92, (TfLiteIntArray*)&g0::tensor_dimension92, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension93, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant93))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[39] = {
=======
const TfLiteStridedSliceParams opdata35 = { 15, 13, 0, 0, 0 };
const TfArray<4, int> inputs35 = { 4, { 87,88,89,90 } };
const TfArray<1, int> outputs35 = { 1, { 91 } };
const TfLiteConcatenationParams opdata36 = { 1, kTfLiteActNone };
const TfArray<4, int> inputs36 = { 4, { 23,45,67,91 } };
const TfArray<1, int> outputs36 = { 1, { 92 } };
const TfLiteReshapeParams opdata37 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs37 = { 2, { 92,93 } };
const TfArray<1, int> outputs37 = { 1, { 94 } };
const TfLiteFullyConnectedParams opdata38 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs38 = { 3, { 94,95,96 } };
const TfArray<1, int> outputs38 = { 1, { 97 } };
const TfLiteSoftmaxParams opdata39 = { 1 };
const TfArray<1, int> inputs39 = { 1, { 97 } };
const TfArray<1, int> outputs39 = { 1, { 1 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2587, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension1, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12080), (TfLiteIntArray*)&g0::tensor_dimension3, 2587, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5312), (TfLiteIntArray*)&g0::tensor_dimension7, 663, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 5304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5312), (TfLiteIntArray*)&g0::tensor_dimension11, 1456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension15, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension22, 2688, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 15440), (TfLiteIntArray*)&g0::tensor_dimension23, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension27, 754, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6144), (TfLiteIntArray*)&g0::tensor_dimension29, 767, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 6136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6144), (TfLiteIntArray*)&g0::tensor_dimension34, 5928, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3248), (TfLiteIntArray*)&g0::tensor_dimension35, 1624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension36, 3248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3248), (TfLiteIntArray*)&g0::tensor_dimension40, 3024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension41, 896, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 11248), (TfLiteIntArray*)&g0::tensor_dimension45, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data46, (TfLiteIntArray*)&g0::tensor_dimension46, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data47, (TfLiteIntArray*)&g0::tensor_dimension47, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data48, (TfLiteIntArray*)&g0::tensor_dimension48, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 702, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data50, (TfLiteIntArray*)&g0::tensor_dimension50, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5728), (TfLiteIntArray*)&g0::tensor_dimension51, 715, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 5720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data53, (TfLiteIntArray*)&g0::tensor_dimension53, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data54, (TfLiteIntArray*)&g0::tensor_dimension54, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data55, (TfLiteIntArray*)&g0::tensor_dimension55, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5728), (TfLiteIntArray*)&g0::tensor_dimension56, 5512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3024), (TfLiteIntArray*)&g0::tensor_dimension57, 1512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 3024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data59, (TfLiteIntArray*)&g0::tensor_dimension59, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data60, (TfLiteIntArray*)&g0::tensor_dimension60, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data61, (TfLiteIntArray*)&g0::tensor_dimension61, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3024), (TfLiteIntArray*)&g0::tensor_dimension62, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension63, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data64, (TfLiteIntArray*)&g0::tensor_dimension64, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data65, (TfLiteIntArray*)&g0::tensor_dimension65, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data66, (TfLiteIntArray*)&g0::tensor_dimension66, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14672), (TfLiteIntArray*)&g0::tensor_dimension67, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data68, (TfLiteIntArray*)&g0::tensor_dimension68, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data69, (TfLiteIntArray*)&g0::tensor_dimension69, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data70, (TfLiteIntArray*)&g0::tensor_dimension70, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 702, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data72, (TfLiteIntArray*)&g0::tensor_dimension72, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5728), (TfLiteIntArray*)&g0::tensor_dimension73, 715, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension74, 5720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data75, (TfLiteIntArray*)&g0::tensor_dimension75, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data76, (TfLiteIntArray*)&g0::tensor_dimension76, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data77, (TfLiteIntArray*)&g0::tensor_dimension77, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5728), (TfLiteIntArray*)&g0::tensor_dimension78, 5512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension79, 1512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data80, (TfLiteIntArray*)&g0::tensor_dimension80, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3136), (TfLiteIntArray*)&g0::tensor_dimension81, 1568, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension82, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data83, (TfLiteIntArray*)&g0::tensor_dimension83, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data84, (TfLiteIntArray*)&g0::tensor_dimension84, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data85, (TfLiteIntArray*)&g0::tensor_dimension85, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3136), (TfLiteIntArray*)&g0::tensor_dimension86, 3024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension87, 896, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data88, (TfLiteIntArray*)&g0::tensor_dimension88, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data89, (TfLiteIntArray*)&g0::tensor_dimension89, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data90, (TfLiteIntArray*)&g0::tensor_dimension90, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 896), (TfLiteIntArray*)&g0::tensor_dimension91, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3200), (TfLiteIntArray*)&g0::tensor_dimension92, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data93, (TfLiteIntArray*)&g0::tensor_dimension93, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension94, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant94))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data95, (TfLiteIntArray*)&g0::tensor_dimension95, 9600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant95))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data96, (TfLiteIntArray*)&g0::tensor_dimension96, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant96))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3200), (TfLiteIntArray*)&g0::tensor_dimension97, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant97))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[40] = {
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
<<<<<<< HEAD
};
#else
TfLiteNode tflNodes[39] = {
=======
{ (TfLiteIntArray*)&g0::inputs39, (TfLiteIntArray*)&g0::outputs39, (TfLiteIntArray*)&g0::inputs39, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata39)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[40] = {
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
<<<<<<< HEAD
=======
{ (TfLiteIntArray*)&g0::inputs39, (TfLiteIntArray*)&g0::outputs39, (TfLiteIntArray*)&g0::inputs39, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata39)), nullptr, 0, },
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
};
#endif

used_operators_e used_ops[] =
<<<<<<< HEAD
{OP_RESHAPE, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONCATENATION, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 94, };
const size_t tflNodes_subgraph_index[] = {0, 39, };
=======
{OP_RESHAPE, OP_STRIDED_SLICE, OP_CONV_2D, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_STRIDED_SLICE, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_PAD, OP_CONV_2D, OP_STRIDED_SLICE, OP_MAX_POOL_2D, OP_STRIDED_SLICE, OP_CONCATENATION, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 98, };
const size_t tflNodes_subgraph_index[] = {0, 40, };
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  1, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3117_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

<<<<<<< HEAD
  ctx.tensors_size = 94;
  for (size_t i = 0; i < 94; ++i) {
=======
  ctx.tensors_size = 98;
  for (size_t i = 0; i < 98; ++i) {
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_STRIDED_SLICE] = Register_STRIDED_SLICE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_CONCATENATION] = Register_CONCATENATION();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3117_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3117_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3117_invoke() {
<<<<<<< HEAD
  for (size_t i = 0; i < 39; ++i) {
=======
  for (size_t i = 0; i < 40; ++i) {
>>>>>>> ab9923a28fc5410c832133804f4acbe53395f851
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3117_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
